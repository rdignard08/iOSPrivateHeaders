
@protocol CUIThemeImageSource, NSCopying, NSCoding;
@interface CUIThemeFacet : NSObject <CUIThemeImageSource, NSCopying, NSCoding> {

    ^{_renditionkeytoken=SS} _renditionKeyList;
    unsigned long long _themeIndex;
    long long _renditionType;
    {CGSize="width"d"height"d} _thumbnailSize;
    {CGPoint="x"d"y"d} _hotSpot;
    {?="hasCheckedButtonGlyph"b1"isButtonGlyph"b1"reserved"b14} _fFlags;
}
 + (void) initialize;
 + (unsigned long long) themeNamed:(id)aforBundleIdentifier:(id)berror:(^@)c;
 + (id) _themeStoreForThemeIndex:(unsigned long long)a;
 + (id) facetWithElement:(long long)apart:(long long)bdimension1:(long long)cdimension2:(long long)dfromTheme:(unsigned long long)e;
 + (id) _facetWithKeyList:(r^{_renditionkeytoken=SS})aandRenditionKeyClass:(Class)borRenditionKey:(id)cfromTheme:(unsigned long long)d;
 + (void) _invalidateArtworkCaches;
 + (unsigned long long) themeForBundleIdentifier:(id)aerror:(^@)b;
 + (unsigned long long) themeWithContentsOfURL:(id)aerror:(^@)b;
 + (id) debug_bundleIdentifierForThemeRef:(unsigned long long)a;
 + (id) facetWithElement:(long long)apart:(long long)bfromTheme:(unsigned long long)c;
 + (id) facetWithRenditionKey:(id)afromTheme:(unsigned long long)b;
 + (id) cursorFacetWithName:(id)afromTheme:(unsigned long long)b;
 + (BOOL) assetExistsForRenditionKey:(id)afromTheme:(unsigned long long)b;

 - (id) displayName;
 - (id) copyWithZone:(^{_NSZone=})a;
 - (id) description;
 - (void) dealloc;
 - (void) setControlSize:(long long)a;
 - (id) imageForState:(long long)a;
 - (long long) controlSize;
 - ({CGSize=dd}) thumbnailSize;
 - (id) init;
 - (void) encodeWithCoder:(id)a;
 - (id) initWithCoder:(id)a;
 - (double) alpha;
 - (int) blendMode;
 - (id) _rendition;
 - (id) _themeStore;
 - (id) _renditionForSpecificKey:(id)a;
 - (id) imageForSliceIndex:(long long)a;
 - (unsigned long long) themeIndex;
 - (BOOL) _isButtonGlyph;
 - ({CGSize=dd}) imageSize;
 - (void) _drawAsMaskSpecificRenditionKey:(id)ainFrame:({CGRect={CGPoint=dd}{CGSize=dd}})bcontext:(^{CGContext=})calpha:(double)doperation:(int)eisFocused:(int)f;
 - (void) _drawSpecificRenditionKey:(id)ainFrame:({CGRect={CGPoint=dd}{CGSize=dd}})bcontext:(^{CGContext=})calpha:(double)doperation:(int)eisFocused:(int)fisFlipped:(BOOL)g;
 - (id) initWithRenditionKey:(id)afromTheme:(unsigned long long)b;
 - (void) _initWithRenditionKey:(id)a;
 - (void) _applyFixedAttributesToKey:(id)a;
 - (^{CGImage=}) copyLayerImageContentsAndCenter:(^{CGRect={CGPoint=dd}{CGSize=dd}})arenditionKey:(id)b;
 - (id) gradientWithKeyAdjustment:(id)aangle:(^d)bstyle:(^Q)c;
 - (^{CGImage=}) copyLayerImageContentsAndCenter:(^{CGRect={CGPoint=dd}{CGSize=dd}})a;
 - (id) blendModeAsCAFilterString;
 - (void) _drawSpecificRenditionKey:(id)ainFrame:({CGRect={CGPoint=dd}{CGSize=dd}})bcontext:(^{CGContext=})cisFocused:(int)disFlipped:(BOOL)e;
 - (void) drawInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aalpha:(double)boperation:(int)cisFocused:(int)dcontext:(^{CGContext=})e;
 - (id) themeRendition;
 - (void) drawInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aalpha:(double)bowner:(id)cuserInfo:(id)dcontext:(^{CGContext=})e;
 - (void) drawHighlightInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aalpha:(double)bowner:(id)cuserInfo:(id)dcontext:(^{CGContext=})e;
 - (void) drawMaskInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aalpha:(double)bowner:(id)cuserInfo:(id)dcontext:(^{CGContext=})e;
 - (void) _updateSpecificRenditionKey:(id)aisFocused:(^B)bowner:(id)cuserInfo:(id)d;
 - (BOOL) _canGetRenditionForKey:(id)awithDrawingLayer:(long long)b;
 - (id) _imageForRenditionFromKey:(id)awithSize:({CGSize=dd})bisMask:(BOOL)c;
 - (void) drawInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aalpha:(double)boperation:(int)cowner:(id)duserInfo:(id)econtext:(^{CGContext=})f;
 - (void) drawHighlightInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aalpha:(double)boperation:(int)cowner:(id)duserInfo:(id)econtext:(^{CGContext=})f;
 - (void) _drawMaskFromSpecificRenditionKey:(id)ainFrame:({CGRect={CGPoint=dd}{CGSize=dd}})balpha:(double)coperation:(int)disFocused:(int)econtext:(^{CGContext=})f;
 - (void) drawInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aalpha:(double)boperation:(int)cisFocused:(int)dkeyAdjustment:(id)econtext:(^{CGContext=})f;
 - (void) drawHighlightInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aalpha:(double)boperation:(int)ckeyAdjustment:(id)dcontext:(^{CGContext=})e;
 - (void) drawMaskInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aalpha:(double)boperation:(int)cisFocused:(int)dkeyAdjustment:(id)econtext:(^{CGContext=})f;
 - (id) renditionForSpecificKeyWrapper:(id)a;
 - (void) _drawSpecificRenditionKey:(id)arendition:(id)binFrame:({CGRect={CGPoint=dd}{CGSize=dd}})ccontext:(^{CGContext=})dalpha:(double)eoperation:(int)fisFocused:(int)gisFlipped:(BOOL)h;
 - (void) drawGradientInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aangle:(double)balpha:(double)coperation:(int)disFocused:(int)ekeyAdjustment:(id)fcontext:(^{CGContext=})g;
 - (long long) _sliceIndexForSlice:(long long)aofRendition:(id)b;
 - (id) _approximateRenditionForRenditionKey:(id)a;
 - (id) imageForState:(long long)avalue:(long long)b;
 - (BOOL) isValidButtonImageSourceForSize:(unsigned long long)a;
 - (id) imageForState:(long long)avalue:(long long)bsize:(unsigned long long)c;
 - (id) renditionKey;
 - (double) alphaWithKeyAdjustment:(id)a;
 - (int) blendModeWithKeyAdjustment:(id)a;
 - (id) blendModeAsCAFilterStringWithKeyAjustment:(id)a;
 - ({CGSize=dd}) _thumbnailSizeForRendition:(id)a;
 - (id) thumbnail;
 - (id) imageForState:(long long)awithValue:(long long)b;
 - (BOOL) hasValueSlices;
 - ({CGPoint=dd}) _hotSpot;
 - (void) _setHasCheckedButtonGlyph:(BOOL)a;
 - (void) _setIsButtonGlyph:(BOOL)a;
 - (id) makeLayer;
 - (void) updateLayer:(id)a;
 - (void) drawInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aisFocused:(int)bcontext:(^{CGContext=})c;
 - (void) drawInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aalpha:(double)bisFocused:(int)ccontext:(^{CGContext=})d;
 - (void) drawAsOnePartWithSlice:(int)ainFrame:({CGRect={CGPoint=dd}{CGSize=dd}})bisFocused:(int)ccontext:(^{CGContext=})d;
 - (void) drawAbsoluteAnimationFrame:(double)adestinationFrame:({CGRect={CGPoint=dd}{CGSize=dd}})bisFocused:(int)ccontext:(^{CGContext=})d;
 - (void) drawAnimationFrameMappedFrom0_1RangedValue:(double)adestinationFrame:({CGRect={CGPoint=dd}{CGSize=dd}})bisFocused:(int)ccontext:(^{CGContext=})d;
 - (void) drawSegmentInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aisFocused:(int)bsegmentType:(int)ccontext:(^{CGContext=})d;
 - (void) drawInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aowner:(id)buserInfo:(id)ccontext:(^{CGContext=})d;
 - (void) drawHighlightInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aowner:(id)buserInfo:(id)ccontext:(^{CGContext=})d;
 - (void) drawMaskInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aowner:(id)buserInfo:(id)ccontext:(^{CGContext=})d;
 - (BOOL) hitTestAtPoint:({CGPoint=dd})ainFrame:({CGRect={CGPoint=dd}{CGSize=dd}})bowner:(id)cuserInfo:(id)d;
 - (void) drawPulseInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})apulseValue:(double)bowner:(id)cuserInfo:(id)dcontext:(^{CGContext=})e;
 - (void) drawInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aalpha:(double)bisFocused:(int)ckeyAdjustment:(id)dcontext:(^{CGContext=})e;
 - (void) drawHighlightInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aalpha:(double)bkeyAdjustment:(id)ccontext:(^{CGContext=})d;
 - (void) drawMaskInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})aalpha:(double)bisFocused:(int)ckeyAdjustment:(id)dcontext:(^{CGContext=})e;
 - (void) drawPulseInFrame:({CGRect={CGPoint=dd}{CGSize=dd}})apulseValue:(double)bisFocused:(int)ckeyAdjustment:(id)dcontext:(^{CGContext=})e;
 - (void) _drawSlice:(long long)ainFrame:({CGRect={CGPoint=dd}{CGSize=dd}})bwithKeyAdjustment:(id)ccontext:(^{CGContext=})d;
 - (id) renditionMetricsWithKeyAdjustment:(id)a;
 - (id) renditionSliceInformationForRect:({CGRect={CGPoint=dd}{CGSize=dd}})akeyAdjustment:(id)b;
 - (BOOL) isValidButtonImageSource;
 - (id) imageWithKeyAdjustment:(id)a;
 - (void) _setThemeIndex:(unsigned long long)a;
 - (long long) renditionType;
 - ({CGSize=dd}) topLeftCapSize;
 - (id) maskForSlice:(long long)awithKeyAdjustment:(id)b;
 - (id) imageForSlice:(long long)awithKeyAdjustment:(id)b;
 - (id) imageWithSize:({CGSize=dd})akeyAdjustment:(id)b;
 - (id) highlightWithSize:({CGSize=dd})akeyAdjustment:(id)b;
 - (id) maskWithSize:({CGSize=dd})akeyAdjustment:(id)b;
 - (id) image;


@end
