
@protocol NSCopying, NSSecureCoding;
@interface NSCalendar : NSObject <NSCopying, NSSecureCoding> {

}
@property (atomic, copy, readonly) NSString* calendarIdentifier;
@property (atomic, copy, readwrite) NSLocale* locale;
@property (atomic, copy, readwrite) NSTimeZone* timeZone;
@property (atomic, assign, readwrite) NSNumber* firstWeekday;
@property (atomic, assign, readwrite) NSNumber* minimumDaysInFirstWeek;
@property (atomic, copy, readonly) NSArray* eraSymbols;
@property (atomic, copy, readonly) NSArray* longEraSymbols;
@property (atomic, copy, readonly) NSArray* monthSymbols;
@property (atomic, copy, readonly) NSArray* shortMonthSymbols;
@property (atomic, copy, readonly) NSArray* veryShortMonthSymbols;
@property (atomic, copy, readonly) NSArray* standaloneMonthSymbols;
@property (atomic, copy, readonly) NSArray* shortStandaloneMonthSymbols;
@property (atomic, copy, readonly) NSArray* veryShortStandaloneMonthSymbols;
@property (atomic, copy, readonly) NSArray* weekdaySymbols;
@property (atomic, copy, readonly) NSArray* shortWeekdaySymbols;
@property (atomic, copy, readonly) NSArray* veryShortWeekdaySymbols;
@property (atomic, copy, readonly) NSArray* standaloneWeekdaySymbols;
@property (atomic, copy, readonly) NSArray* shortStandaloneWeekdaySymbols;
@property (atomic, copy, readonly) NSArray* veryShortStandaloneWeekdaySymbols;
@property (atomic, copy, readonly) NSArray* quarterSymbols;
@property (atomic, copy, readonly) NSArray* shortQuarterSymbols;
@property (atomic, copy, readonly) NSArray* standaloneQuarterSymbols;
@property (atomic, copy, readonly) NSArray* shortStandaloneQuarterSymbols;
@property (atomic, copy, readonly) NSString* AMSymbol;
@property (atomic, copy, readonly) NSString* PMSymbol;
 + (id) autoupdatingCurrentCalendar;
 + (BOOL) supportsSecureCoding;
 + (void) initialize;
 + (id) allocWithZone:(^{_NSZone=})a;
 + (id) currentCalendar;
 + (id) calendarWithIdentifier:(id)a;

 - (id) _dateOnlyComponentsForDate:(id)a;
 - (id) _timeOnlyComponentsForDate:(id)a;
 - (BOOL) date:(id)aisSameDayAsDate:(id)b;
 - (BOOL) date:(id)aisSameYearAsDate:(id)b;
 - (Class) classForCoder;
 - (void) encodeWithCoder:(id)a;
 - (id) initWithCoder:(id)a;
 - (id) copyWithZone:(^{_NSZone=})a;
 - (Q) hash;
 - (BOOL) isEqual:(id)a;
 - (Q) _cfTypeID;
 - (id) initWithCalendarIdentifier:(id)a;
 - (void) setTimeZone:(id)a;
 - (id) dateFromComponents:(id)a;
 - (BOOL) isDateInToday:(id)a;
 - (BOOL) isDateInTomorrow:(id)a;
 - (BOOL) isDateInYesterday:(id)a;
 - (BOOL) isDate:(id)ainSameDayAsDate:(id)b;
 - (q) compareDate:(id)atoDate:(id)btoUnitGranularity:(Q)c;
 - (id) calendarIdentifier;
 - (void) setLocale:(id)a;
 - (id) locale;
 - (id) timeZone;
 - (void) setFirstWeekday:(Q)a;
 - (Q) firstWeekday;
 - (void) setMinimumDaysInFirstWeek:(Q)a;
 - (Q) minimumDaysInFirstWeek;
 - ({_NSRange=QQ}) minimumRangeOfUnit:(Q)a;
 - ({_NSRange=QQ}) maximumRangeOfUnit:(Q)a;
 - ({_NSRange=QQ}) rangeOfUnit:(Q)ainUnit:(Q)bforDate:(id)c;
 - (Q) ordinalityOfUnit:(Q)ainUnit:(Q)bforDate:(id)c;
 - (BOOL) rangeOfUnit:(Q)astartDate:(^@)binterval:(^d)cforDate:(id)d;
 - (id) components:(Q)afromDate:(id)b;
 - (id) dateByAddingComponents:(id)atoDate:(id)boptions:(Q)c;
 - (id) components:(Q)afromDate:(id)btoDate:(id)coptions:(Q)d;
 - (BOOL) nextWeekendStartDate:(o^@)ainterval:(o^d)boptions:(Q)cafterDate:(id)d;
 - (BOOL) isDateInWeekend:(id)a;
 - (void) enumerateDatesStartingAfterDate:(id)amatchingComponents:(id)boptions:(Q)cusingBlock:(@?)d;
 - (id) gregorianStartDate;
 - (void) setGregorianStartDate:(id)a;
 - (id) nextDateAfterDate:(id)amatchingComponents:(id)boptions:(Q)c;
 - (id) dateBySettingUnit:(Q)avalue:(q)bofDate:(id)coptions:(Q)d;
 - (q) component:(Q)afromDate:(id)b;
 - (id) dateBySettingHour:(q)aminute:(q)bsecond:(q)cofDate:(id)doptions:(Q)e;
 - (void) getEra:(o^q)ayear:(o^q)bmonth:(o^q)cday:(o^q)dfromDate:(id)e;
 - (void) getEra:(o^q)ayearForWeekOfYear:(o^q)bweekOfYear:(o^q)cweekday:(o^q)dfromDate:(id)e;
 - (void) getHour:(o^q)aminute:(o^q)bsecond:(o^q)cnanosecond:(o^q)dfromDate:(id)e;
 - (id) dateWithEra:(q)ayear:(q)bmonth:(q)cday:(q)dhour:(q)eminute:(q)fsecond:(q)gnanosecond:(q)h;
 - (id) dateWithEra:(q)ayearForWeekOfYear:(q)bweekOfYear:(q)cweekday:(q)dhour:(q)eminute:(q)fsecond:(q)gnanosecond:(q)h;
 - (id) startOfDayForDate:(id)a;
 - (id) componentsInTimeZone:(id)afromDate:(id)b;
 - (BOOL) isDate:(id)aequalToDate:(id)btoUnitGranularity:(Q)c;
 - (BOOL) rangeOfWeekendStartDate:(o^@)ainterval:(o^d)bcontainingDate:(id)c;
 - (id) components:(Q)afromDateComponents:(id)btoDateComponents:(id)coptions:(Q)d;
 - (id) dateByAddingUnit:(Q)avalue:(q)btoDate:(id)coptions:(Q)d;
 - (id) nextDateAfterDate:(id)amatchingUnit:(Q)bvalue:(q)coptions:(Q)d;
 - (id) nextDateAfterDate:(id)amatchingHour:(q)bminute:(q)csecond:(q)doptions:(Q)e;
 - (id) dateBySettingUnit:(Q)avalue:(q)btoDate:(id)coptions:(Q)d;
 - (id) dateBySettingHour:(q)aminute:(q)bsecond:(q)ctoDate:(id)doptions:(Q)e;
 - (BOOL) date:(id)amatchesComponents:(id)b;
 - (id) _copyLocale;
 - (id) _copyTimeZone;
 - (void) _setGregorianStartDate:(id)a;
 - (id) _gregorianStartDate;
 - (id) eraSymbols;
 - (id) weekdaySymbols;
 - (id) shortWeekdaySymbols;
 - (id) longEraSymbols;
 - (id) veryShortMonthSymbols;
 - (id) veryShortStandaloneMonthSymbols;
 - (id) veryShortWeekdaySymbols;
 - (id) standaloneWeekdaySymbols;
 - (id) shortStandaloneWeekdaySymbols;
 - (id) veryShortStandaloneWeekdaySymbols;
 - (id) quarterSymbols;
 - (id) shortQuarterSymbols;
 - (id) standaloneQuarterSymbols;
 - (id) shortStandaloneQuarterSymbols;
 - ({?=qq}) _minimumRangeOfUnit:(Q)a;
 - ({?=qq}) _maximumRangeOfUnit:(Q)a;
 - ({?=qq}) _rangeOfUnit:(Q)ainUnit:(Q)bforAT:(d)c;
 - (q) _ordinalityOfUnit:(Q)ainUnit:(Q)bforAT:(d)c;
 - (C) _rangeOfUnit:(Q)astartTime:(^d)binterval:(^d)cforAT:(d)d;
 - (C) _composeAbsoluteTime:(^d)a;
 - (C) _decomposeAbsoluteTime:(d)a;
 - (C) _addComponents:(^d)a;
 - (C) _diffComponents:(d)a;
 - (id) init;
 - (void) encodeWithCoder:(id)a;
 - (id) initWithCoder:(id)a;
 - (id) monthSymbols;
 - (id) shortMonthSymbols;
 - (id) standaloneMonthSymbols;
 - (id) shortStandaloneMonthSymbols;
 - (id) AMSymbol;
 - (id) PMSymbol;


@end
