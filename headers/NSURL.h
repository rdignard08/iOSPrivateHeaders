
@protocol NSSecureCoding, NSCopying, QLPreviewItem;
@interface NSURL : NSObject <NSSecureCoding, NSCopying, QLPreviewItem> {

    NSString* _urlString;
    NSURL* _baseURL;
    ^v _clients;
    ^v _reserved;
}
@property (atomic, assign, readonly) NSURL* previewItemURL;
@property (atomic, assign, readonly) NSString* previewItemTitle;
@property (atomic, copy, readonly) NSArray* pathComponents;
@property (atomic, copy, readonly) NSString* lastPathComponent;
@property (atomic, copy, readonly) NSString* pathExtension;
@property (atomic, copy, readonly) NSURL* URLByDeletingLastPathComponent;
@property (atomic, copy, readonly) NSURL* URLByDeletingPathExtension;
@property (atomic, copy, readonly) NSURL* URLByStandardizingPath;
@property (atomic, copy, readonly) NSURL* URLByResolvingSymlinksInPath;
@property (atomic, copy, readonly) NSString* absoluteString;
@property (atomic, copy, readonly) NSString* relativeString;
@property (atomic, copy, readonly) NSURL* baseURL;
@property (atomic, copy, readonly) NSURL* absoluteURL;
@property (atomic, copy, readonly) NSString* scheme;
@property (atomic, copy, readonly) NSString* resourceSpecifier;
@property (atomic, copy, readonly) NSString* host;
@property (atomic, copy, readonly) NSNumber* port;
@property (atomic, copy, readonly) NSString* user;
@property (atomic, copy, readonly) NSString* password;
@property (atomic, copy, readonly) NSString* path;
@property (atomic, copy, readonly) NSString* fragment;
@property (atomic, copy, readonly) NSString* parameterString;
@property (atomic, copy, readonly) NSString* query;
@property (atomic, copy, readonly) NSString* relativePath;
@property (atomic, assign, readonly) NSNumber* fileSystemRepresentation;
@property (atomic, assign, readonly, getter=isFileURL) NSNumber* fileURL;
@property (atomic, copy, readonly) NSURL* standardizedURL;
@property (atomic, copy, readonly) NSURL* filePathURL;
 + (id) _web_URLWithWTFString:(r^{String={RefPtr<WTF::StringImpl>=^{StringImpl}}})a;
 + (id) _web_URLWithWTFString:(r^{String={RefPtr<WTF::StringImpl>=^{StringImpl}}})arelativeToURL:(id)b;
 + (id) unescapedStringForString:(id)a;
 + (id) escapedStringForString:(id)a;
 + (id) copyDictionaryForQueryString:(id)aunescapedValues:(BOOL)b;
 + (id) queryStringForDictionary:(id)aescapedValues:(BOOL)b;
 + (id) mapsURLWithQuery:(id)a;
 + (id) mapsURLWithAddress:(id)a;
 + (id) mapsURLWithSourceAddress:(id)adestinationAddress:(id)b;
 + (id) URLWithDisplayIdentifier:(id)aforSearchResultDomain:(int)bandIdentifier:(unsigned long long)c;
 + (id) _web_URLWithUserTypedString:(id)a;
 + (id) uniqueURLWithRelativePart:(id)a;
 + (id) _web_URLWithDataAsString:(id)arelativeToURL:(id)b;
 + (id) _web_URLWithUserTypedString:(id)arelativeToURL:(id)b;
 + (id) _web_URLWithDataAsString:(id)a;
 + (id) _web_URLWithData:(id)a;
 + (id) _web_URLWithData:(id)arelativeToURL:(id)b;
 + (id) _web_uniqueWebDataURL;
 + (id) _URLWithDataAsString:(id)arelativeToURL:(id)b;
 + (id) _URLWithData:(id)arelativeToURL:(id)b;
 + (id) _web_URLWithString:(id)arelativeToURL:(id)b;
 + (id) _web_URLWithComponents:({?=@@@@q@@@})a;
 + (BOOL) automaticallyNotifiesObserversForKey:(id)a;
 + (id) fileURLWithPathComponents:(id)a;
 + (id) URLWithString:(id)arelativeToURL:(id)b;
 + (id) URLByResolvingBookmarkData:(id)aoptions:(unsigned long long)brelativeToURL:(id)cbookmarkDataIsStale:(^B)derror:(^@)e;
 + (id) URLByResolvingAliasFileAtURL:(id)aoptions:(unsigned long long)berror:(^@)c;
 + (id) allocWithZone:(^{_NSZone=})a;
 + (id) URLWithString:(id)a;
 + (id) fileURLWithPath:(id)a;
 + (id) fileURLWithFileSystemRepresentation:(r*)aisDirectory:(BOOL)brelativeToURL:(id)c;
 + (id) fileURLWithPath:(id)aisDirectory:(BOOL)b;
 + (BOOL) supportsSecureCoding;
 + (id) resourceValuesForKeys:(id)afromBookmarkData:(id)b;
 + (id) __unurl;
 + (BOOL) writeBookmarkData:(id)atoURL:(id)boptions:(unsigned long long)cerror:(^@)d;
 + (id) bookmarkDataWithContentsOfURL:(id)aerror:(^@)b;

 - (id) previewItemURL;
 - ({String={RefPtr<WTF::StringImpl>=^{StringImpl}}}) _web_originalDataAsWTFString;
 - (id) sanitizedURL;
 - (id) copyQueryStringDictionaryWithUnescapedValues:(BOOL)a ;
 - (id) URLByAppendingQueryParameter:(id)a value:(id)b ;
 - (id) urlBySettingQueryStringDictionary:(id)a ;
 - (BOOL) isSafeExternalURL;
 - (id) schemeSwizzledURL;
 - (id) urlByReplacingSchemeWithScheme:(id)a ;
 - (void) enumerateQueryWithBlock:(@?)a ;
 - (id) initWithXPCEncoding:(id)a ;
 - (id) copyXPCEncoding;
 - (BOOL) isStoreServicesURL;
 - (void) chmod:(unsigned short)a ;
 - (id) gs_issueExtension:(r*)a error:(^@)b ;
 - (id) gs_issueReadExtensionIfNeededForPid:(int)a ;
 - (id) gs_URLByUpdatingPathExtensionWithPathOrURL:(id)a ;
 - (BOOL) isInternalUIKitURL;
 - (id) searchResultIdentifier;
 - (id) searchResultDomain;
 - (void) _domain:(^@)a subdomain:(^@)b ;
 - (BOOL) _isGoogleMapsDomain:(id)a subdomain:(id)b path:(id)c queryKeysAndValues:(id)d ;
 - (BOOL) isGoogleMapsURL;
 - (id) phobosURL;
 - (id) itmsURL;
 - (id) appleStoreURL;
 - (id) radarWebURL;
 - (BOOL) isSpringboardHandledURL;
 - (BOOL) isWebcalURL;
 - (BOOL) isAccountURL;
 - (BOOL) isJavaScriptURL;
 - (BOOL) isHTTPOrHTTPSURL;
 - (BOOL) ui_hasReadSandboxExtended;
 - (id) ui_issueSandboxExtensionOfClass:(r*)a error:(^@)b ;
 - (BOOL) ui_hasSandboxExtendedForClass:(r*)a ;
 - (id) ui_issueReadSandboxExtensionWithError:(^@)a ;
 - (id) ui_issueReadWriteSandboxExtensionWithError:(^@)a ;
 - (id) _webkit_URLByRemovingFragment;
 - (id) _web_hostString;
 - (id) _web_originalDataAsString;
 - (id) _web_userVisibleString;
 - (id) _webkit_canonicalize;
 - (id) _webkit_URLFromURLOrSchemelessFileURL;
 - (BOOL) _webkit_isJavaScriptURL;
 - (id) _webkit_scriptIfJavaScriptURL;
 - (BOOL) _webkit_isFileURL;
 - (BOOL) _webkit_isFTPDirectoryURL;
 - (BOOL) _web_isEmpty;
 - (id) _web_schemeData;
 - (id) _web_hostData;
 - (id) _web_originalData;
 - (r*) _web_URLCString;
 - (id) _web_URLByTruncatingOneCharacterBeforeComponent:(long long)a ;
 - (id) _webkit_URLByRemovingResourceSpecifier;
 - (id) _web_URLByRemovingUserInfo;
 - (BOOL) _webkit_shouldLoadAsEmptyDocument;
 - (id) _web_URLWithLowercasedScheme;
 - (id) _web_schemeSeparatorWithoutColon;
 - (id) _web_dataForURLComponentType:(long long)a ;
 - (id) _webkit_suggestedFilenameWithMIMEType:(id)a ;
 - (void) encodeWithCAMLWriter:(id)a ;
 - (id) CAMLType;
 - (id) twitterURL;
 - (id) mapsURL;
 - (id) youTubeURL;
 - (id) gamecenterURL;
 - (id) fmfURL;
 - (id) fmipURL;
 - (id) photosURL;
 - (id) iCloudFamilyURL;
 - (id) facebookURL;
 - (id) betaStoreURL;
 - (id) keynoteLiveURL;
 - (id) iCloudSharingURL;
 - (id) iTunesStoreURL;
 - (BOOL) isiWorkURL;
 - (id) iCloudSharingURL_noFragment;
 - (BOOL) conformsToOverridePatternWithKey:(id)a ;
 - (id) iWorkApplicationName;
 - (id) iWorkDocumentName;
 - (long long) _promiseExtensionConsume;
 - (void) _promiseExtensionRelease:(long long)a ;
 - (id) _fixedUpSideFaultError:(id)a ;
 - (void) _performWithPhysicalURL:(@?)a ;
 - (id) _valueFromFaultDictionary:(id)a forKey:(id)b ;
 - (BOOL) checkPromisedItemIsReachableAndReturnError:(^@)a ;
 - (id) promisedItemResourceValuesForKeys:(id)a error:(^@)b ;
 - (BOOL) getPromisedItemResourceValue:(o^@)a forKey:(id)b error:(o^@)c ;
 - (id) _hostString;
 - (id) _web_URLByRemovingLastPathComponent_nowarn;
 - (id) _web_URLByRemovingUserAndPath_nowarn;
 - (id) _web_URLByRemovingUserAndQueryAndFragment_nowarn;
 - (id) _URLByEscapingSpacesAndControlChars;
 - (BOOL) _web_isJavaScriptURL;
 - ({?=@@@@q@@@}) _web_URLComponents;
 - (id) _web_scriptIfJavaScriptURL;
 - (id) _web_suggestedFilenameWithMIMEType:(id)a ;
 - (id) URLByDeletingLastPathComponent;
 - (id) pathComponents;
 - (id) URLByStandardizingPath;
 - (id) URLByResolvingSymlinksInPath;
 - (id) URLByDeletingPathExtension;
 - (id) URLByAppendingPathExtension:(id)a ;
 - (id) lastPathComponent;
 - (id) URLByAppendingPathComponent:(id)a ;
 - (id) URLByAppendingPathComponent:(id)a isDirectory:(BOOL)b ;
 - (id) pathExtension;
 - (id) initFileURLWithPath:(id)a isDirectory:(BOOL)b ;
 - (BOOL) getFileSystemRepresentation:(char*)a maxLength:(unsigned long long)b ;
 - (void) _freeClients;
 - (BOOL) _isAbsolute;
 - (id) initWithString:(id)a relativeToURL:(id)b ;
 - (id) initFileURLWithFileSystemRepresentation:(r*)a isDirectory:(BOOL)b relativeToURL:(id)c ;
 - (id) initByResolvingBookmarkData:(id)a options:(unsigned long long)b relativeToURL:(id)c bookmarkDataIsStale:(^B)d error:(^@)e ;
 - (id) initByResolvingAliasFileAtURL:(id)a options:(unsigned long long)b error:(^@)c ;
 - (^{__CFDictionary=}) _clientsCreatingIfNecessary:(BOOL)a ;
 - (id) _relativeURLPath;
 - (id) standardizedURL;
 - (id) relativePath;
 - (id) copyWithZone:(^{_NSZone=})a ;
 - (id) description;
 - (id) retain;
 - (Vv) release;
 - (unsigned long long) retainCount;
 - (void) dealloc;
 - (void) finalize;
 - (BOOL) _tryRetain;
 - (BOOL) _isDeallocating;
 - (BOOL) isKindOfClass:(Class)a ;
 - (unsigned long long) hash;
 - (BOOL) isEqual:(id)a ;
 - (unsigned long long) _cfTypeID;
 - (id) initFileURLWithPath:(id)a ;
 - (id) absoluteURL;
 - (id) relativeString;
 - (id) baseURL;
 - (id) scheme;
 - (id) host;
 - (id) port;
 - (id) user;
 - (id) password;
 - (id) fragment;
 - (id) query;
 - (id) parameterString;
 - (^{__CFURL=}) _cfurl;
 - (id) initWithString:(id)a ;
 - (BOOL) isFileURL;
 - (id) resourceSpecifier;
 - (id) init;
 - (BOOL) isMemberOfClass:(Class)a ;
 - (void) encodeWithCoder:(id)a ;
 - (id) initWithCoder:(id)a ;
 - (id) absoluteString;
 - (id) initWithScheme:(id)a host:(id)b path:(id)c ;
 - (r*) fileSystemRepresentation;
 - (id) path;
 - (BOOL) _isSafeFileForBackgroundUpload:(int)a ;
 - (BOOL) _isSafeDirectoryForDownloads:(int)a ;
 - (BOOL) getResourceValue:(o^@)a forKey:(id)b error:(o^@)c ;
 - (id) resourceValuesForKeys:(id)a error:(^@)b ;
 - (id) filePathURL;
 - (id) bookmarkDataWithOptions:(unsigned long long)a includingResourceValuesForKeys:(id)b relativeToURL:(id)c error:(^@)d ;
 - (BOOL) setResourceValues:(id)a error:(^@)b ;
 - (BOOL) checkResourceIsReachableAndReturnError:(^@)a ;
 - (id) fileReferenceURL;
 - (BOOL) isFileReferenceURL;
 - (void) removeCachedResourceValueForKey:(id)a ;
 - (void) removeAllCachedResourceValues;
 - (void) setTemporaryResourceValue:(id)a forKey:(id)b ;
 - (id) bookmarkDataWithAliasRecord:(id)a ;
 - (BOOL) startAccessingSecurityScopedResource;
 - (void) stopAccessingSecurityScopedResource;
 - (BOOL) setResourceValue:(id)a forKey:(id)b error:(^@)c ;


@end
