
@protocol NSCopying, NSCoding;
@interface UIBezierPath : NSObject <NSCopying, NSCoding> {

    ^{CGPath=} _path;
    ^d _lineDashPattern;
    unsigned long long _lineDashPatternCount;
    double _lineWidth;
    double _miterLimit;
    double _flatness;
    double _lineDashPhase;
    int _lineCapStyle;
    int _lineJoinStyle;
    BOOL _usesEvenOddFillRule;
    ^{CGPath=} _immutablePath;
    BOOL _immutablePathIsValid;
}
@property (nonatomic, assign, readwrite) NSNumber* CGPath;
@property (atomic, assign, readonly, getter=isEmpty) NSNumber* empty;
@property (nonatomic, assign, readonly) NSNumber* bounds;
@property (nonatomic, assign, readonly) NSNumber* currentPoint;
@property (nonatomic, assign, readwrite) NSNumber* lineWidth;
@property (nonatomic, assign, readwrite) NSNumber* lineCapStyle;
@property (nonatomic, assign, readwrite) NSNumber* lineJoinStyle;
@property (nonatomic, assign, readwrite) NSNumber* miterLimit;
@property (nonatomic, assign, readwrite) NSNumber* flatness;
@property (nonatomic, assign, readwrite) NSNumber* usesEvenOddFillRule;
 + (id) bezierPath;
 + (id) _bezierPathWithRoundedRect:({CGRect={CGPoint=dd}{CGSize=dd}})abyRoundingCorners:(unsigned long long)bcornerRadius:(double)c;
 + (id) _roundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedCorners:(int)bcornerRadius:(double)csegments:(int)dlegacyCorners:(BOOL)e;
 + (id) roundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedCorners:(int)bwithCornerRadii:(id)c;
 + (id) _continuousRoundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedCorners:(int)bcornerRadius:({CGSize=dd})csegments:(int)d;
 + (id) _continuousRoundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedCorners:(int)bcornerRadii:(id)csegments:(int)dsmoothPillShapes:(BOOL)e;
 + (id) bezierPathWithRect:({CGRect={CGPoint=dd}{CGSize=dd}})a;
 + (id) bezierPathWithOvalInRect:({CGRect={CGPoint=dd}{CGSize=dd}})a;
 + (id) bezierPathWithRoundedRect:({CGRect={CGPoint=dd}{CGSize=dd}})acornerRadius:(double)b;
 + (id) _bezierPathWithArcRoundedRect:({CGRect={CGPoint=dd}{CGSize=dd}})acornerRadius:(double)b;
 + (id) bezierPathWithRoundedRect:({CGRect={CGPoint=dd}{CGSize=dd}})abyRoundingCorners:(unsigned long long)bcornerRadii:({CGSize=dd})c;
 + (id) bezierPathWithArcCenter:({CGPoint=dd})aradius:(double)bstartAngle:(double)cendAngle:(double)dclockwise:(BOOL)e;
 + (id) bezierPathWithCGPath:(^{CGPath=})a;
 + (id) roundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithTopCornerRadius:(double)bwithBottomCornerRadius:(double)c;
 + (id) roundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedEdges:(unsigned long long)b;
 + (id) roundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedCorners:(int)bwithCornerRadius:(double)c;
 + (id) _roundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedCorners:(int)bcornerRadius:(double)csegments:(int)d;
 + (id) _bezierPathWithPillRect:({CGRect={CGPoint=dd}{CGSize=dd}})acornerRadius:(double)b;
 + (id) shadowBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedEdges:(unsigned long long)b;

 - (id) copyWithZone:(^{_NSZone=})a ;
 - (id) description;
 - (void) dealloc;
 - (BOOL) isEmpty;
 - (BOOL) isEqual:(id)a ;
 - (id) _initWithCGMutablePath:(^{CGPath=})a ;
 - (^{CGPath=}) _createMutablePathByDecodingData:(id)a ;
 - (^{CGPath=}) _mutablePath;
 - (void) moveToPoint:({CGPoint=dd})a ;
 - (void) addLineToPoint:({CGPoint=dd})a ;
 - (void) closePath;
 - (void) addQuadCurveToPoint:({CGPoint=dd})a controlPoint:({CGPoint=dd})b ;
 - (void) addCurveToPoint:({CGPoint=dd})a controlPoint1:({CGPoint=dd})b controlPoint2:({CGPoint=dd})c ;
 - (void) addClip;
 - (void) addArcWithCenter:({CGPoint=dd})a radius:(double)b startAngle:(double)c endAngle:(double)d clockwise:(BOOL)e ;
 - (void) appendPath:(id)a ;
 - (void) applyTransform:({CGAffineTransform=dddddd})a ;
 - (void) removeAllPoints;
 - (id) bezierPathByReversingPath;
 - (void) setCGPath:(^{CGPath=})a ;
 - ({CGPoint=dd}) currentPoint;
 - (void) setLineDash:(r^d)a count:(long long)b phase:(double)c ;
 - (void) getLineDash:(^d)a count:(^q)b phase:(^d)c ;
 - (void) fill;
 - (void) stroke;
 - (void) fillWithBlendMode:(int)a alpha:(double)b ;
 - (void) strokeWithBlendMode:(int)a alpha:(double)b ;
 - (void) _addRoundedCornerWithTrueCorner:({CGPoint=dd})a radius:({CGSize=dd})b corner:(unsigned long long)c clockwise:(BOOL)d ;
 - (^{CGPath=}) _pathRef;
 - (void) lineToPoint:({CGPoint=dd})a ;
 - (void) clip;
 - (void) appendBezierPath:(id)a ;
 - (void) appendBezierPathWithRect:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (void) appendBezierPathWithOvalInRect:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (void) appendBezierPathWithOvalInRect:({CGRect={CGPoint=dd}{CGSize=dd}})a transform:({CGAffineTransform=dddddd})b ;
 - (void) appendBezierPathWithArcWithCenter:({CGPoint=dd})a radius:(double)b startAngle:(double)c endAngle:(double)d clockwise:(BOOL)e ;
 - (void) setLineWidth:(double)a ;
 - (int) lineCapStyle;
 - (void) setLineCapStyle:(int)a ;
 - (int) lineJoinStyle;
 - (void) setLineJoinStyle:(int)a ;
 - (void) setMiterLimit:(double)a ;
 - (double) flatness;
 - (void) setFlatness:(double)a ;
 - (void) setUsesEvenOddFillRule:(BOOL)a ;
 - (id) init;
 - (void) encodeWithCoder:(id)a ;
 - (id) initWithCoder:(id)a ;
 - (^{CGPath=}) CGPath;
 - (BOOL) usesEvenOddFillRule;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) bounds;
 - (double) lineWidth;
 - (double) miterLimit;
 - (BOOL) containsPoint:({CGPoint=dd})a ;


@end
