
@protocol NSCopying, NSCoding;
@interface UIBezierPath : NSObject <NSCopying, NSCoding> {

    ^{CGPath=} _path;
    ^d _lineDashPattern;
    Q _lineDashPatternCount;
    d _lineWidth;
    d _miterLimit;
    d _flatness;
    d _lineDashPhase;
    i _lineCapStyle;
    i _lineJoinStyle;
    BOOL _usesEvenOddFillRule;
    ^{CGPath=} _immutablePath;
    BOOL _immutablePathIsValid;
}
@property (nonatomic, assign, readwrite) NSNumber* CGPath;
@property (atomic, assign, readonly, isEmpty) NSNumber* empty;
@property (nonatomic, assign, readonly) NSNumber* bounds;
@property (nonatomic, assign, readonly) NSNumber* currentPoint;
@property (nonatomic, assign, readwrite) NSNumber* lineWidth;
@property (nonatomic, assign, readwrite) NSNumber* lineCapStyle;
@property (nonatomic, assign, readwrite) NSNumber* lineJoinStyle;
@property (nonatomic, assign, readwrite) NSNumber* miterLimit;
@property (nonatomic, assign, readwrite) NSNumber* flatness;
@property (nonatomic, assign, readwrite) NSNumber* usesEvenOddFillRule;
 + (id) bezierPath;
 + (id) _bezierPathWithRoundedRect:({CGRect={CGPoint=dd}{CGSize=dd}})abyRoundingCorners:(Q)bcornerRadius:(d)c;
 + (id) _roundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedCorners:(i)bcornerRadius:(d)csegments:(i)dlegacyCorners:(BOOL)e;
 + (id) roundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedCorners:(i)bwithCornerRadii:(id)c;
 + (id) _continuousRoundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedCorners:(i)bcornerRadius:({CGSize=dd})csegments:(i)d;
 + (id) _continuousRoundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedCorners:(i)bcornerRadii:(id)csegments:(i)dsmoothPillShapes:(BOOL)e;
 + (id) bezierPathWithRect:({CGRect={CGPoint=dd}{CGSize=dd}})a;
 + (id) bezierPathWithOvalInRect:({CGRect={CGPoint=dd}{CGSize=dd}})a;
 + (id) bezierPathWithRoundedRect:({CGRect={CGPoint=dd}{CGSize=dd}})acornerRadius:(d)b;
 + (id) _bezierPathWithArcRoundedRect:({CGRect={CGPoint=dd}{CGSize=dd}})acornerRadius:(d)b;
 + (id) bezierPathWithRoundedRect:({CGRect={CGPoint=dd}{CGSize=dd}})abyRoundingCorners:(Q)bcornerRadii:({CGSize=dd})c;
 + (id) bezierPathWithArcCenter:({CGPoint=dd})aradius:(d)bstartAngle:(d)cendAngle:(d)dclockwise:(BOOL)e;
 + (id) bezierPathWithCGPath:(^{CGPath=})a;
 + (id) roundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithTopCornerRadius:(d)bwithBottomCornerRadius:(d)c;
 + (id) roundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedEdges:(Q)b;
 + (id) roundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedCorners:(i)bwithCornerRadius:(d)c;
 + (id) _roundedRectBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedCorners:(i)bcornerRadius:(d)csegments:(i)d;
 + (id) _bezierPathWithPillRect:({CGRect={CGPoint=dd}{CGSize=dd}})acornerRadius:(d)b;
 + (id) shadowBezierPath:({CGRect={CGPoint=dd}{CGSize=dd}})awithRoundedEdges:(Q)b;

 - (id) copyWithZone:(^{_NSZone=})a;
 - (id) description;
 - (void) dealloc;
 - (BOOL) isEmpty;
 - (BOOL) isEqual:(id)a;
 - (id) _initWithCGMutablePath:(^{CGPath=})a;
 - (^{CGPath=}) _createMutablePathByDecodingData:(id)a;
 - (^{CGPath=}) _mutablePath;
 - (void) moveToPoint:({CGPoint=dd})a;
 - (void) addLineToPoint:({CGPoint=dd})a;
 - (void) closePath;
 - (void) addQuadCurveToPoint:({CGPoint=dd})acontrolPoint:({CGPoint=dd})b;
 - (void) addCurveToPoint:({CGPoint=dd})acontrolPoint1:({CGPoint=dd})bcontrolPoint2:({CGPoint=dd})c;
 - (void) addClip;
 - (void) addArcWithCenter:({CGPoint=dd})aradius:(d)bstartAngle:(d)cendAngle:(d)dclockwise:(BOOL)e;
 - (void) appendPath:(id)a;
 - (void) applyTransform:({CGAffineTransform=dddddd})a;
 - (void) removeAllPoints;
 - (id) bezierPathByReversingPath;
 - (void) setCGPath:(^{CGPath=})a;
 - ({CGPoint=dd}) currentPoint;
 - (void) setLineDash:(r^d)acount:(q)bphase:(d)c;
 - (void) getLineDash:(^d)acount:(^q)bphase:(^d)c;
 - (void) fill;
 - (void) stroke;
 - (void) fillWithBlendMode:(i)aalpha:(d)b;
 - (void) strokeWithBlendMode:(i)aalpha:(d)b;
 - (void) _addRoundedCornerWithTrueCorner:({CGPoint=dd})aradius:({CGSize=dd})bcorner:(Q)cclockwise:(BOOL)d;
 - (^{CGPath=}) _pathRef;
 - (void) lineToPoint:({CGPoint=dd})a;
 - (void) clip;
 - (void) appendBezierPath:(id)a;
 - (void) appendBezierPathWithRect:({CGRect={CGPoint=dd}{CGSize=dd}})a;
 - (void) appendBezierPathWithOvalInRect:({CGRect={CGPoint=dd}{CGSize=dd}})a;
 - (void) appendBezierPathWithOvalInRect:({CGRect={CGPoint=dd}{CGSize=dd}})atransform:({CGAffineTransform=dddddd})b;
 - (void) appendBezierPathWithArcWithCenter:({CGPoint=dd})aradius:(d)bstartAngle:(d)cendAngle:(d)dclockwise:(BOOL)e;
 - (void) setLineWidth:(d)a;
 - (i) lineCapStyle;
 - (void) setLineCapStyle:(i)a;
 - (i) lineJoinStyle;
 - (void) setLineJoinStyle:(i)a;
 - (void) setMiterLimit:(d)a;
 - (d) flatness;
 - (void) setFlatness:(d)a;
 - (void) setUsesEvenOddFillRule:(BOOL)a;
 - (id) init;
 - (void) encodeWithCoder:(id)a;
 - (id) initWithCoder:(id)a;
 - (^{CGPath=}) CGPath;
 - (BOOL) usesEvenOddFillRule;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) bounds;
 - (d) lineWidth;
 - (d) miterLimit;
 - (BOOL) containsPoint:({CGPoint=dd})a;


@end
