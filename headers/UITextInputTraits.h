
@protocol UITextInputTraits, UITextInputTraits_Private, NSCopying;
@interface UITextInputTraits : NSObject <UITextInputTraits, UITextInputTraits_Private, NSCopying> {

    q autocapitalizationType;
    q autocorrectionType;
    q spellCheckingType;
    b8 keyboardType;
    b8 keyboardAppearance;
    q returnKeyType;
    BOOL enablesReturnKeyAutomatically;
    BOOL secureTextEntry;
    ^{__CFCharacterSet=} textTrimmingSet;
    @"UIColor" insertionPointColor;
    @"UIColor" selectionBarColor;
    @"UIColor" selectionHighlightColor;
    @"UIImage" selectionDragDotImage;
    Q insertionPointWidth;
    i textLoupeVisibility;
    i textSelectionBehavior;
    id textSuggestionDelegate;
    BOOL isSingleLineDocument;
    BOOL contentsIsSingleValue;
    BOOL acceptsEmoji;
    BOOL forceEnableDictation;
    BOOL returnKeyGoesToNextResponder;
    BOOL acceptsFloatingKeyboard;
    BOOL acceptsSplitKeyboard;
    BOOL displaySecureTextUsingPlainText;
    BOOL learnsCorrections;
    i emptyContentReturnKeyType;
    i shortcutConversionType;
    BOOL suppressReturnKeyStyling;
    BOOL useInterfaceLanguageForLocalization;
    BOOL deferBecomingResponder;
    BOOL enablesReturnKeyOnNonWhiteSpaceContent;
    @"NSString" autocorrectionContext;
    @"NSString" responseContext;
    BOOL disablePrediction;
}
@property (nonatomic, assign, readwrite) NSNumber* autocapitalizationType;
@property (nonatomic, assign, readwrite) NSNumber* autocorrectionType;
@property (nonatomic, assign, readwrite) NSNumber* spellCheckingType;
@property (nonatomic, assign, readwrite) NSNumber* keyboardType;
@property (nonatomic, assign, readwrite) NSNumber* keyboardAppearance;
@property (nonatomic, assign, readwrite) NSNumber* returnKeyType;
@property (nonatomic, assign, readwrite) NSNumber* enablesReturnKeyAutomatically;
@property (nonatomic, assign, readwrite, isSecureTextEntry) NSNumber* secureTextEntry;
@property (nonatomic, assign, readwrite) NSNumber* textTrimmingSet;
@property (nonatomic, retain, readwrite) UIColor* insertionPointColor;
@property (nonatomic, retain, readwrite) UIColor* selectionBarColor;
@property (nonatomic, retain, readwrite) UIColor* selectionHighlightColor;
@property (nonatomic, retain, readwrite) UIImage* selectionDragDotImage;
@property (nonatomic, assign, readwrite) NSNumber* insertionPointWidth;
@property (nonatomic, assign, readwrite) NSNumber* textLoupeVisibility;
@property (nonatomic, assign, readwrite) NSNumber* textSelectionBehavior;
@property (nonatomic, assign, readwrite) NSNumber* textSuggestionDelegate;
@property (nonatomic, assign, readwrite) NSNumber* isSingleLineDocument;
@property (nonatomic, assign, readwrite) NSNumber* contentsIsSingleValue;
@property (nonatomic, assign, readwrite) NSNumber* acceptsEmoji;
@property (nonatomic, assign, readwrite) NSNumber* forceEnableDictation;
@property (nonatomic, assign, readwrite) NSNumber* emptyContentReturnKeyType;
@property (nonatomic, assign, readwrite) NSNumber* returnKeyGoesToNextResponder;
@property (nonatomic, assign, readwrite) NSNumber* acceptsFloatingKeyboard;
@property (nonatomic, assign, readwrite) NSNumber* acceptsSplitKeyboard;
@property (nonatomic, assign, readwrite) NSNumber* displaySecureTextUsingPlainText;
@property (nonatomic, assign, readwrite) NSNumber* learnsCorrections;
@property (nonatomic, assign, readwrite) NSNumber* shortcutConversionType;
@property (nonatomic, assign, readwrite) NSNumber* suppressReturnKeyStyling;
@property (nonatomic, assign, readwrite) NSNumber* useInterfaceLanguageForLocalization;
@property (nonatomic, assign, readwrite) NSNumber* deferBecomingResponder;
@property (nonatomic, assign, readwrite) NSNumber* enablesReturnKeyOnNonWhiteSpaceContent;
@property (nonatomic, copy, readwrite) NSString* autocorrectionContext;
@property (nonatomic, copy, readwrite) NSString* responseContext;
@property (nonatomic, assign, readwrite) NSNumber* disablePrediction;
 + (id) traitsByAdoptingTraits:(id)a;
 + (id) defaultTextInputTraits;
 + (q) accessibleAppearanceForAppearance:(q)a;
 + (BOOL) keyboardTypeRequiresASCIICapable:(q)a;

 - (id) dictionaryRepresentation;
 - (id) copyWithZone:(^{_NSZone=})a;
 - (id) description;
 - (void) dealloc;
 - (BOOL) isEqual:(id)a;
 - (void) setToDefaultValues;
 - (void) takeTraitsFrom:(id)a;
 - (i) textSelectionBehavior;
 - (BOOL) isSecureTextEntry;
 - (BOOL) displaySecureTextUsingPlainText;
 - (void) setAutocorrectionType:(q)a;
 - (void) setSpellCheckingType:(q)a;
 - (void) setKeyboardAppearance:(q)a;
 - (void) setReturnKeyType:(q)a;
 - (void) setEnablesReturnKeyAutomatically:(BOOL)a;
 - (^{__CFCharacterSet=}) textTrimmingSet;
 - (BOOL) acceptsSplitKeyboard;
 - (i) shortcutConversionType;
 - (BOOL) acceptsFloatingKeyboard;
 - (BOOL) disablePrediction;
 - (BOOL) learnsCorrections;
 - (void) setLearnsCorrections:(BOOL)a;
 - (id) autocorrectionContext;
 - (void) setResponseContext:(id)a;
 - (q) updateResultComparedToTraits:(id)a;
 - (void) setTextTrimmingSet:(^{__CFCharacterSet=})a;
 - (id) insertionPointColor;
 - (void) setInsertionPointColor:(id)a;
 - (id) selectionBarColor;
 - (void) setSelectionBarColor:(id)a;
 - (id) selectionHighlightColor;
 - (void) setSelectionHighlightColor:(id)a;
 - (id) selectionDragDotImage;
 - (void) setSelectionDragDotImage:(id)a;
 - (Q) insertionPointWidth;
 - (void) setInsertionPointWidth:(Q)a;
 - (i) textLoupeVisibility;
 - (void) setTextLoupeVisibility:(i)a;
 - (void) setTextSelectionBehavior:(i)a;
 - (id) textSuggestionDelegate;
 - (void) setTextSuggestionDelegate:(id)a;
 - (BOOL) isSingleLineDocument;
 - (void) setIsSingleLineDocument:(BOOL)a;
 - (BOOL) contentsIsSingleValue;
 - (void) setContentsIsSingleValue:(BOOL)a;
 - (BOOL) acceptsEmoji;
 - (void) setAcceptsEmoji:(BOOL)a;
 - (BOOL) forceEnableDictation;
 - (void) setForceEnableDictation:(BOOL)a;
 - (i) emptyContentReturnKeyType;
 - (void) setEmptyContentReturnKeyType:(i)a;
 - (BOOL) returnKeyGoesToNextResponder;
 - (void) setReturnKeyGoesToNextResponder:(BOOL)a;
 - (void) setAcceptsFloatingKeyboard:(BOOL)a;
 - (void) setAcceptsSplitKeyboard:(BOOL)a;
 - (void) setDisplaySecureTextUsingPlainText:(BOOL)a;
 - (void) setShortcutConversionType:(i)a;
 - (BOOL) suppressReturnKeyStyling;
 - (void) setSuppressReturnKeyStyling:(BOOL)a;
 - (BOOL) useInterfaceLanguageForLocalization;
 - (void) setUseInterfaceLanguageForLocalization:(BOOL)a;
 - (BOOL) deferBecomingResponder;
 - (void) setDeferBecomingResponder:(BOOL)a;
 - (BOOL) enablesReturnKeyOnNonWhiteSpaceContent;
 - (void) setEnablesReturnKeyOnNonWhiteSpaceContent:(BOOL)a;
 - (void) setAutocorrectionContext:(id)a;
 - (void) setDisablePrediction:(BOOL)a;
 - (void) setToSecureValues;
 - (BOOL) publicTraitsMatchTraits:(id)a;
 - (void) _setColorsToMatchTintColor:(id)a;
 - (id) init;
 - (q) keyboardType;
 - (q) autocapitalizationType;
 - (void) setAutocapitalizationType:(q)a;
 - (void) setKeyboardType:(q)a;
 - (void) setSecureTextEntry:(BOOL)a;
 - (id) responseContext;
 - (q) autocorrectionType;
 - (q) spellCheckingType;
 - (q) keyboardAppearance;
 - (q) returnKeyType;
 - (BOOL) enablesReturnKeyAutomatically;


@end
