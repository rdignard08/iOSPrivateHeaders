
@protocol DDDetectionControllerInteractionDelegate, _UIRotatingAlertControllerDelegate, UITextAutoscrolling, UIAutoscrollContainer, UIGestureRecognizerDelegate, UIKeyboardInput, UITextInputPrivate, UIKeyInput, UIModalViewDelegate, UITextInputTokenizer, _UIWebDoubleTapDelegate, UIWebFileUploadPanelDelegate;
@interface UIWebDocumentView : UIWebTiledView <DDDetectionControllerInteractionDelegate, _UIRotatingAlertControllerDelegate, UITextAutoscrolling, UIAutoscrollContainer, UIGestureRecognizerDelegate, UIKeyboardInput, UITextInputPrivate, UIKeyInput, UIModalViewDelegate, UITextInputTokenizer, _UIWebDoubleTapDelegate, UIWebFileUploadPanelDelegate> {

    WebView* _webView;
    id m_parentTextView;
    id _delegate;
    id _textSuggestionDelegate;
    {CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}} _doubleTapRect;
    {CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}} _mainDocumentDoubleTapRect;
    {CGPoint="x"d"y"d} _scrollPoint;
    {CGPoint="x"d"y"d} _doubleTapStartPosition;
    double _doubleTapStartTime;
    {CGSize="width"d"height"d} _pendingSize;
    long long _orientation;
    DOMHTMLElement* _standaloneEditingElement;
    {CGPoint="x"d"y"d} _mouseDownPoint;
    double _mouseDownTime;
    UIAutoscroll* _autoscroll;
    ^{__CFDictionary=} _plugInViews;
    long long m_selectionGranularity;
    CALayer* _contentLayersHostingLayer;
    CALayer* _flattenedRotatingContentLayer;
    NSArray* _additionalSubviews;
    UITextInputTraits* _traits;
    <UITextInputDelegate>* _inputDelegate;
    UITapGestureRecognizer* _singleTapGestureRecognizer;
    UITapGestureRecognizer* _doubleTapGestureRecognizer;
    UITapGestureRecognizer* _twoFingerDoubleTapGestureRecognizer;
    _UIWebHighlightLongPressGestureRecognizer* _highlightLongPressGestureRecognizer;
    UILongPressGestureRecognizer* _longPressGestureRecognizer;
    UIPanGestureRecognizer* _twoFingerPanGestureRecognizer;
    {?="timer"@"NSTimer""location"{CGPoint="x"d"y"d}"isBlocked"B"isCancelled"B"isOnWebThread"B"isDisplayingHighlight"B"attemptedClick"B"lastPanTranslation"{CGPoint="x"d"y"d}"element"@"DOMNode""delegate"@"interactionSheet"@"UIWebRotatingAlertController""allowsImageSheet"B"allowsDataDetectorsSheet"B"allowsLinkSheet"B"acceptsFirstResponder"B"documentScale"d} _interaction;
    _UIWebViewportHandler* _viewportHandler;
    int _documentType;
    float _documentScale;
    float _previousDocumentScale;
    {CGSize="width"d"height"d} _fixedLayoutOriginRoundingDelta;
    {CGSize="width"d"height"d} _fixedLayoutSizeRoundingDelta;
    unsigned int _mouseDownCount;
    unsigned long long _dataDetectorTypes;
    b1 _webCoreNeedsSetNeedsDisplay;
    b1 _webCoreNeedsDraw;
    b1 _ignoresFocusingMouse;
    b1 _ignoresKeyEvents;
    b1 _autoresizes;
    b1 _ignoresViewportOverflowWhenAutoresizing;
    b1 _shouldIgnoreCustomViewport;
    b1 _updatingSize;
    b1 _scalesToFit;
    b1 _updatesScrollView;
    b1 _hasCustomScale;
    b1 _shouldRestoreScrollPosition;
    b1 _pageNeedsReset;
    b1 _hasScrollPoint;
    b1 _gesturesDisabled;
    b1 _doubleTapRectIsReplaced;
    b1 _standaloneEditableView;
    b1 _widgetEditingView;
    b1 _mouseDragged;
    b1 _mouseReentrancyGuard;
    b1 _isShowingFullScreenPlugIn;
    b1 _isSettingRedrawFrame;
    b1 _needsScrollNotifications;
    b1 _loadsSynchronously;
    b1 _mouseDown;
    b1 _usePreTimberlineTransparencyBehavior;
    b1 _geolocationDialogAllowed;
    b1 _usingMinimalTilesDuringLoading;
    b2 _sheetsCount;
    b1 _didFirstVisuallyNonEmptyLayout;
    b1 _loadInProgress;
    b1 _uiwdvIsResigningFirstResponder;
    b1 _sizeUpdatesSuspended;
    b1 _sizeUpdateOccurredWhileSuspended;
    b1 _shouldOnlyRecognizeGesturesOnActiveElements;
    b1 _ignoresFocusEventFromFirstResponderChange;
    b1 _shouldCloseWebViewAtDealloc;
    b1 _shouldRemoveUserStyleSheet;
    b1 _hasDrawnTiles;
    b1 _showingTextStyleOptions;
    b1 _subviewCachesNeedUpdate;
    b1 _avoidFixedPositionUpdateViaDidScroll;
    b1 _inspectorSearchingForNode;
    b1 _previousScrollWasScrollToTop;
    b1 _pageIsLoadedFromPageCache;
    b1 _shouldSendWillShowInteractionHighlight;
    WebThreadSafeUndoManager* _undoManager;
    UIWebSelectionAssistant* _webSelectionAssistant;
    UITextInteractionAssistant* _textSelectionAssistant;
    UITextChecker* _textChecker;
    {UIEdgeInsets="top"d"left"d"bottom"d"right"d} _caretInsets;
    UIWebFileUploadPanel* _fileUploadPanel;
    int _selectionAffinity;
    DOMElement* _dictationResultPlaceholder;
    id _dictationResultPlaceholderRemovalObserver;
    DOMRange* _rangeToRestoreAfterDictation;
    UIWebPlaybackTargetPicker* _playbackTargetPicker;
    [5{_UIWebViewportConfiguration="size"{CGSize="width"d"height"d}"initialScale"f"minimumScale"f"maximumScale"f"allowsUserScaling"B}] _defaultViewportConfigurations;
    _UITextServiceSession* _definitionSession;
    _UITextServiceSession* _learnSession;
    WebHistoryItem* _latestCommittedPageLoadHistoryItem;
    BOOL _suppressesIncrementalRendering;
    BOOL _wantsMinimalUI;
    unsigned long long _renderTreeSize;
    unsigned long long _renderTreeSizeThresholdForReset;
    {CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}} _exposedScrollViewRect;
}
 + (void) initialize;
 + (Class) layerClass;
 + (id) standardTextViewPreferences;
 + (double) getTimestamp;
 + (id) _createDefaultHighlightView;
 + (id) _sharedHighlightView;
 + (BOOL) hasLandscapeOrientation;

 - (void) dealloc;
 - (void) forwardInvocation:(id)a ;
 - (void) setDelegate:(id)a ;
 - (id) methodSignatureForSelector:(SEL)a ;
 - (void) _setTextColor:(id)a ;
 - (void) layoutSubviews;
 - (BOOL) gestureRecognizerShouldBegin:(id)a ;
 - (BOOL) gestureRecognizer:(id)a shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)b ;
 - (BOOL) gestureRecognizer:(id)a shouldReceiveTouch:(id)b ;
 - (BOOL) canPerformAction:(SEL)a withSender:(id)b ;
 - (void) increaseSize:(id)a ;
 - (void) decreaseSize:(id)a ;
 - (BOOL) _isDisplayingShortcutViewController;
 - (void) setText:(id)a ;
 - (id) scriptingInfoWithChildren;
 - (BOOL) cancelTouchTracking;
 - (BOOL) cancelMouseTracking;
 - (id) _responderForBecomeFirstResponder;
 - (BOOL) canBecomeFirstResponder;
 - (void) deferredBecomeFirstResponder;
 - (void) _didMoveFromWindow:(id)a toWindow:(id)b ;
 - (void) didMoveToSuperview;
 - (void) willMoveToSuperview:(id)a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) visibleBounds;
 - (^{CGImage=}) newSnapshotWithRect:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (^{CGImage=}) createSnapshotWithRect:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (void) _didScroll;
 - (BOOL) gestureRecognizer:(id)a canPreventGestureRecognizer:(id)b ;
 - ({CGPoint=dd}) autoscrollContentOffset;
 - (void) setAutoscrollContentOffset:({CGPoint=dd})a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) contentFrameForView:(id)a ;
 - (void) _setFont:(id)a ;
 - (BOOL) isEditing;
 - (id) interactionAssistant;
 - (id) selectionView;
 - (BOOL) keyboardInput:(id)a shouldInsertText:(id)b isMarkedText:(BOOL)c ;
 - (BOOL) keyboardInput:(id)a shouldReplaceTextInRange:({_NSRange=QQ})b replacementText:(id)c ;
 - (BOOL) keyboardInputShouldDelete:(id)a ;
 - (BOOL) keyboardInputChanged:(id)a ;
 - (void) keyboardInputChangedSelection:(id)a ;
 - (void) scrollSelectionToVisible:(BOOL)a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) _selectionClipRect;
 - (void) cancelAutoscroll;
 - (void) setSelectionWithPoint:({CGPoint=dd})a ;
 - (void) takeTraitsFrom:(id)a ;
 - (id) beginningOfDocument;
 - (id) endOfDocument;
 - (id) textRangeFromPosition:(id)a toPosition:(id)b ;
 - (id) textInRange:(id)a ;
 - (id) inputDelegate;
 - (void) setSelectedTextRange:(id)a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) caretRectForPosition:(id)a ;
 - (BOOL) hasText;
 - (void) deleteBackward;
 - (void) replaceRange:(id)a withText:(id)b ;
 - (void) replaceRangeWithTextWithoutClosingTyping:(id)a replacementText:(id)b ;
 - (id) selectedTextRange;
 - (void) selectionChanged;
 - (id) markedTextRange;
 - (id) markedTextStyle;
 - (void) setMarkedTextStyle:(id)a ;
 - (void) unmarkText;
 - (id) positionFromPosition:(id)a offset:(long long)b ;
 - (id) positionFromPosition:(id)a inDirection:(long long)b offset:(long long)c ;
 - (long long) comparePosition:(id)a toPosition:(id)b ;
 - (long long) offsetFromPosition:(id)a toPosition:(id)b ;
 - (id) positionWithinRange:(id)a farthestInDirection:(long long)b ;
 - (id) characterRangeByExtendingPosition:(id)a inDirection:(long long)b ;
 - (void) setInputDelegate:(id)a ;
 - (id) tokenizer;
 - (long long) baseWritingDirectionForPosition:(id)a inDirection:(long long)b ;
 - (void) setBaseWritingDirection:(long long)a forRange:(id)b ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) firstRectForRange:(id)a ;
 - (id) selectionRectsForRange:(id)a ;
 - (id) closestPositionToPoint:({CGPoint=dd})a ;
 - (id) closestPositionToPoint:({CGPoint=dd})a withinRange:(id)b ;
 - (id) characterRangeAtPoint:({CGPoint=dd})a ;
 - (void) insertDictationResult:(id)a withCorrectionIdentifier:(id)b ;
 - (id) insertDictationResultPlaceholder;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) frameForDictationResultPlaceholder:(id)a ;
 - (void) removeDictationResultPlaceholder:(id)a willInsertResult:(BOOL)b ;
 - (id) metadataDictionariesForDictationResults;
 - (void) beginSelectionChange;
 - (void) endSelectionChange;
 - (id) textStylingAtPosition:(id)a inDirection:(long long)b ;
 - (void) setSelectionAffinity:(long long)a ;
 - (void) startAutoscroll:({CGPoint=dd})a ;
 - (void) selectAll;
 - (id) _textSelectingContainer;
 - (id) textColorForCaretSelection;
 - ({_NSRange=QQ}) selectionRange;
 - (BOOL) hasMarkedText;
 - (BOOL) canResignFirstResponder;
 - (void) setDataDetectorTypes:(unsigned long long)a ;
 - (unsigned long long) dataDetectorTypes;
 - (id) initSimpleHTMLDocumentWithStyle:(id)a frame:({CGRect={CGPoint=dd}{CGSize=dd}})b preferences:(id)c groupName:(id)d ;
 - (void) setIgnoresFocusingMouse:(BOOL)a ;
 - (void) setLoadsSynchronously:(BOOL)a ;
 - (void) _setParentTextView:(id)a ;
 - (BOOL) makeWKFirstResponder;
 - (void) selectAll:(id)a ;
 - (BOOL) clearWKFirstResponder;
 - (void) _removeDefinitionController:(BOOL)a ;
 - (void) setSelectionToEnd;
 - (void) makeTextWritingDirectionRightToLeft:(id)a ;
 - (void) makeTextWritingDirectionLeftToRight:(id)a ;
 - (void) replace:(id)a ;
 - (void) cut:(id)a ;
 - (void) copy:(id)a ;
 - (void) paste:(id)a ;
 - (void) selectWord;
 - (void) _define:(id)a ;
 - (void) _addShortcut:(id)a ;
 - (void) toggleBoldface:(id)a ;
 - (void) toggleItalics:(id)a ;
 - (void) toggleUnderline:(id)a ;
 - (void) _showTextStyleOptions:(id)a ;
 - (void) ensureSelection;
 - (void) setSelectedDOMRange:(id)a affinity:(int)b ;
 - (id) _focusedOrMainFrame;
 - (BOOL) hasContent;
 - (void) setAllowsDataDetectorsSheet:(BOOL)a ;
 - (unsigned long long) effectiveDataDetectorTypes;
 - (void) tapInteractionWithLocation:({CGPoint=dd})a ;
 - (void) startInteractionWithLocation:({CGPoint=dd})a ;
 - (void) continueInteractionWithLocation:({CGPoint=dd})a ;
 - (void) validateInteractionWithLocation:({CGPoint=dd})a ;
 - (void) cancelInteraction;
 - (BOOL) startActionSheet;
 - (BOOL) isInInteraction;
 - (BOOL) willInteractWithLocation:({CGPoint=dd})a ;
 - (long long) selectionGranularity;
 - (void) setSelectionGranularity:(long long)a ;
 - ({CGPoint=dd}) constrainedPoint:({CGPoint=dd})a ;
 - (void) disableClearsOnInsertion;
 - (void) updateSelection;
 - (void) select:(id)a ;
 - (void) _promptForReplace:(id)a ;
 - (void) setSelectionToStart;
 - (BOOL) becomesEditableWithGestures;
 - (void) setBecomesEditableWithGestures:(BOOL)a ;
 - (id) automaticallySelectedOverlay;
 - (void) setBottomBufferHeight:(double)a ;
 - (Class) _printFormatterClass;
 - (BOOL) _isDisplayingReferenceLibraryViewController;
 - (float) _documentScale;
 - (void) didRemovePlugInView:(id)a ;
 - (void) _setSubviewCachesNeedUpdate:(BOOL)a ;
 - (BOOL) requiresKeyEvents;
 - (id) _parentTextView;
 - (void) setContinuousSpellCheckingEnabled:(BOOL)a ;
 - (void) handleKeyWebEvent:(id)a ;
 - (id) fontForCaretSelection;
 - (void) _insertAttributedTextWithoutClosingTyping:(id)a ;
 - (id) rangeEnclosingPosition:(id)a withGranularity:(long long)b inDirection:(long long)c ;
 - (BOOL) isPosition:(id)a atBoundary:(long long)b inDirection:(long long)c ;
 - (id) positionFromPosition:(id)a toBoundary:(long long)b inDirection:(long long)c ;
 - (BOOL) isPosition:(id)a withinTextUnit:(long long)b inDirection:(long long)c ;
 - (void) _cancelLongPressGestureRecognizer;
 - (void) clearSelection;
 - (void) collapseSelection;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) _lastRectForRange:(id)a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) caretRect;
 - (void) addInputString:(id)a ;
 - (void) replaceCurrentWordWithText:(id)a ;
 - (void) confirmMarkedText:(id)a ;
 - (unsigned short) characterInRelationToCaretSelection:(int)a ;
 - (unsigned short) characterAfterCaretSelection;
 - (id) rectsForNSRange:({_NSRange=QQ})a ;
 - (id) nextUnperturbedDictationResultBoundaryFromPosition:(id)a ;
 - (int) wordOffsetInRange:(id)a ;
 - (BOOL) selectionAtDocumentStart;
 - (BOOL) selectionAtWordStart;
 - (id) rangeByMovingCurrentSelection:(int)a ;
 - (id) rangeByExtendingCurrentSelection:(int)a ;
 - (void) extendCurrentSelection:(int)a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) convertCaretRect:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (BOOL) hasEditableSelection;
 - (void) setInitialScale:(float)a forDocumentTypes:(int)b ;
 - (void) setMinimumScale:(float)a forDocumentTypes:(int)b ;
 - (void) setMaximumScale:(float)a forDocumentTypes:(int)b ;
 - (void) setAllowsUserScaling:(BOOL)a forDocumentTypes:(int)b ;
 - (void) setViewportSize:({CGSize=dd})a forDocumentTypes:(int)b ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) webViewFrameForUIFrame:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (id) initWithWebView:(id)a frame:({CGRect={CGPoint=dd}{CGSize=dd}})b ;
 - (void) installGestureRecognizers;
 - (void) setMinimumSize:({CGSize=dd})a ;
 - (void) _restoreViewportSettingsWithSize:({CGSize=dd})a ;
 - (void) sendOrientationEventForOrientation:(long long)a ;
 - (void) selectionChanged:(id)a ;
 - (void) _resetShowingTextStyle:(id)a ;
 - (void) _inspectorDidStartSearchingForNode:(id)a ;
 - (void) _inspectorDidStopSearchingForNode:(id)a ;
 - (id) _groupName;
 - (BOOL) _dataDetectionIsActivated;
 - (void) cancelInteractionWithImmediateDisplay:(BOOL)a ;
 - (void) _cleanupSheet;
 - (void) _updateScrollViewBoundaryZoomScales;
 - (void) completeInteraction;
 - (void) _runLoadBlock:(@?)a ;
 - (void) _cleanUpFrameStateAndLoad:(@?)a ;
 - (void) loadHTMLString:(id)a baseURL:(id)b ;
 - (void) _updateWebKitExposedScrollViewRect;
 - (void) _notifyContentHostingLayersOfScaleChange;
 - (void) _notifyPlugInViewsOfScaleChange;
 - (void) _updateFixedPositioningObjectsLayoutAfterVisibleGeometryChange;
 - (float) initialScale;
 - (float) maximumScale;
 - (float) minimumScale;
 - (void) _setDocumentScale:(float)a ;
 - (void) _updateFixedPositionedObjectsLayoutRectUsingWebThread:(BOOL)a synchronize:(BOOL)b ;
 - (void) _applyViewportArguments:(id)a ;
 - (void) _setDocumentType:(int)a overrideCustomConfigurations:(BOOL)b viewportArguments:(id)c ;
 - (void) _updateSize;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) documentBounds;
 - (void) _setDocumentType:(int)a ;
 - (BOOL) isClassicViewportMode;
 - (void) sendScrollEventIfNecessaryWasUserScroll:(BOOL)a ;
 - (void) _updateFixedPositioningObjectsLayoutDuringScroll;
 - (void) setTilingArea:(int)a ;
 - (void) resetTilingAfterLoadComplete;
 - (void) _selectionLayoutChangedByScrolling:(BOOL)a ;
 - (void) _editableSelectionLayoutChangedByScrolling:(BOOL)a ;
 - (void) _resetFormDataForFrame:(id)a ;
 - (void) _clearDoubleTapRect;
 - (void) _clearAllConsoleMessages;
 - (void) _WAKViewSizeDidChange:(id)a ;
 - (void) setMinimumSize:({CGSize=dd})a updateCurrentViewportConfigurationSize:(BOOL)b ;
 - (void) _updateFixedPositioningObjectsLayoutAfterScroll;
 - (void) _restoreScrollPointForce:(BOOL)a ;
 - (void) _showPendingContentLayers;
 - (void) _saveStateToHistoryItem:(id)a ;
 - (BOOL) _shouldResetForNewPage;
 - (void) _resetForNewPage;
 - (void) _updateFixedPositionContent;
 - (void) setExposedScrollViewRect:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) _documentViewVisibleRect;
 - (double) _zoomedDocumentScale;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) _layoutRectForFixedPositionObjects;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) _adjustedLayoutRectForFixedPositionObjects;
 - (BOOL) isInsideRichlyEditableTextWidget;
 - (id) formElement;
 - (BOOL) fragmentContainsRichContent:(id)a ;
 - (id) _supportedPasteboardTypesForCurrentSelection;
 - (void) _updateSubviewCaches;
 - (void) _reshapePlugInViews;
 - (id) _collectAdditionalSubviews;
 - (BOOL) _shouldUpdateSubviewCachesForPlugins;
 - (BOOL) _isInspectorSearchingForNode;
 - (void) _restoreFlattenedContentLayers;
 - (void) updateInteractionElements;
 - (void) setMediaPlaybackAllowsAirPlay:(BOOL)a ;
 - (BOOL) _acceptsFirstResponder;
 - (void) _removeShortcutController:(BOOL)a ;
 - (void) setInteractionAssistantGestureRecognizers;
 - (void) _undoManagerDidUndo:(id)a ;
 - (void) _undoManagerDidRedo:(id)a ;
 - (BOOL) isEditingSingleLineElement;
 - (id) rangeToRestoreAfterDictation;
 - (void) setSelectedDOMRange:(id)a affinityDownstream:(BOOL)b ;
 - (void) setRangeToRestoreAfterDictation:(id)a ;
 - (id) dictationResultMetadataForRange:(id)a ;
 - (BOOL) hasRangedSelection;
 - (BOOL) isCaretInEmptyParagraph;
 - (BOOL) _dictationPlaceholderHasBeenRemoved;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) convertRectFromSelectedFrameCoordinates:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (void) _finishedUsingDictationPlaceholder;
 - (void) clearMarkedText;
 - (void) setPaused:(BOOL)a withEvents:(BOOL)b ;
 - (BOOL) isShowingFullScreenPlugInUI;
 - (id) selectionRectsForDOMRange:(id)a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) _shortcutPresentationRect;
 - (BOOL) inPopover;
 - (void) sendScrollEventIfNecessary;
 - (void) _notifyPlugInViewsOfWillBeginZooming;
 - (void) _notifyPlugInViewsOfDidZoom;
 - (void) _notifyPlugInViewsOfDidEndZooming;
 - (unsigned int) _contentSizeInExposedRect:({CGRect={CGPoint=dd}{CGSize=dd}})a topLayer:(id)b visibleLayerCount:(^i)c ;
 - (BOOL) _shouldFlattenContentLayersForRect:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (^v) _createIOSurfaceFromRect:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (BOOL) containsOnlySelectableElements;
 - (id) _positionFromPosition:(id)a inDirection:(long long)b offset:(long long)c withAffinityDownstream:(BOOL)d ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) caretRectForVisiblePosition:(id)a ;
 - (id) webVisiblePositionForPoint:({CGPoint=dd})a ;
 - (float) minimumScaleForMinimumSize:({CGSize=dd})a ;
 - (double) minimumScaleForSize:({CGSize=dd})a ;
 - (double) maximumDoubleTapScale;
 - (id) enclosingScrollView;
 - (double) zoomedDocumentScale;
 - (double) currentDocumentScale;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) visibleContentRect;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) rectOfInterestForPoint:({CGPoint=dd})a ;
 - ({?=ddd}) doubleTapScalesForSize:({CGSize=dd})a ;
 - (BOOL) considerHeightForDoubleTap;
 - (void) willZoomToMinimumScale;
 - (BOOL) shouldSelectionAssistantReceiveDoubleTapAtPoint:({CGPoint=dd})a forScale:(double)b ;
 - (void) willZoomToLocation:({CGPoint=dd})a atScale:(double)b forDuration:(double)c ;
 - (void) fileUploadPanelDidDismiss:(id)a ;
 - (BOOL) _presentViewController:(id)a animated:(BOOL)b completion:(@?)c ;
 - (void) _dismissViewControllerAnimated:(BOOL)a completion:(@?)b ;
 - (BOOL) didFirstVisuallyNonEmptyLayout;
 - (BOOL) hasDrawnTiles;
 - (BOOL) loadsSynchronously;
 - (void) setUserStyleSheet:(id)a ;
 - (void) setDetectsPhoneNumbers:(BOOL)a ;
 - (BOOL) detectsPhoneNumbers;
 - (void) setUsePreTimberlineTransparencyBehavior;
 - (void) viewportHandlerDidChangeScales:(id)a ;
 - (void) viewportHandler:(id)a didChangeViewportSize:({CGSize=dd})b ;
 - ({CGPoint=dd}) convertPoint:({CGPoint=dd})a toFrame:(id)b ;
 - ({CGPoint=dd}) convertPoint:({CGPoint=dd})a fromFrame:(id)b ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) convertRect:({CGRect={CGPoint=dd}{CGSize=dd}})a toFrame:(id)b ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) convertRect:({CGRect={CGPoint=dd}{CGSize=dd}})a fromFrame:(id)b ;
 - (void) setSizeUpdatesSuspended:(BOOL)a ;
 - (BOOL) sizeUpdatesSuspended;
 - (void) setShouldIgnoreCustomViewport:(BOOL)a ;
 - (BOOL) shouldIgnoreCustomViewport;
 - (BOOL) needsScrollNotifications;
 - (void) setAutoresizes:(BOOL)a ;
 - (void) setIgnoresViewportOverflowWhenAutoresizing:(BOOL)a ;
 - (void) setUpdatesScrollView:(BOOL)a ;
 - (BOOL) updatesScrollView;
 - (void) saveStateToCurrentHistoryItem;
 - (void) forceLayout;
 - (void) setSmoothsFonts:(BOOL)a ;
 - (void) setIgnoresKeyEvents:(BOOL)a ;
 - (BOOL) _isSubviewOfPlugInView:(id)a ;
 - (void) _renderUnbufferedInContext:(^{CGContext=})a ;
 - (void) redrawScaledDocument;
 - (void) willRotateInteractionSheet;
 - (void) didRotateInteractionSheet;
 - (void) setShouldOnlyRecognizeGesturesOnActiveElements:(BOOL)a ;
 - (BOOL) shouldOnlyRecognizeGesturesOnActiveElements;
 - (void) setDoubleTapEnabled:(BOOL)a ;
 - (BOOL) isDoubleTapEnabled;
 - (BOOL) _handleSingleTapZoomPreClickAtLocation:({CGPoint=dd})a ;
 - (void) _handleSingleTapZoomPostClickAtLocation:({CGPoint=dd})a ;
 - (void) _handleDoubleTapAtLocation:({CGPoint=dd})a ;
 - (void) _handleTwoFingerDoubleTapAtLocation:({CGPoint=dd})a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) doubleTapRect;
 - (BOOL) doubleTapRectIsReplaced;
 - (void) assistFormNode:(id)a ;
 - (id) textFormElement;
 - (void) setIsStandaloneEditableView:(BOOL)a ;
 - (BOOL) isStandaloneEditableView;
 - (void) setStandaloneEditingElement:(id)a ;
 - (id) standaloneEditingElement;
 - (void) setIsWidgetEditingView:(BOOL)a ;
 - (BOOL) isWidgetEditingView;
 - (BOOL) updateKeyboardStateOnResponderChanges;
 - (id) dictationInterpretations;
 - (void) replaceSelectionWithWebArchive:(id)a selectReplacement:(BOOL)b smartReplace:(BOOL)c ;
 - (id) implementationWebView;
 - (void) setPaused:(BOOL)a ;
 - (BOOL) hasPlugInSubviews;
 - (id) webSelectionAssistant;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) visibleFrame;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) visibleContentFrame;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) autoscrollDragFrame;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) autoscrollContentFrame;
 - (BOOL) playsNicelyWithGestures;
 - (void) useSelectionAssistantWithMode:(int)a ;
 - (void) willStartScroll;
 - (void) willStartScrollToTop;
 - (void) didEndScroll;
 - (void) scrollViewWasRemoved;
 - (void) willStartZoom;
 - (void) didZoom;
 - (void) didEndZoom;
 - (void) _flattenAndSwapContentLayersInRect:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (void) setTileUpdatesDisabled:(BOOL)a ;
 - (BOOL) hasSimpleTextOnlyStructure;
 - (void) setSelectedTextRange:(id)a withAffinityDownstream:(BOOL)b ;
 - (id) rangeOfEnclosingWord:(id)a ;
 - (void) _scrollRectToVisible:({CGRect={CGPoint=dd}{CGSize=dd}})a animated:(BOOL)b ;
 - (id) _documentUrl;
 - (int) documentType;
 - (void) setRenderTreeSizeThresholdForReset:(unsigned long long)a ;
 - (void) setSuppressesIncrementalRendering:(BOOL)a ;
 - (BOOL) wantsMinimalUI;
 - (unsigned long long) renderTreeSize;
 - (unsigned long long) renderTreeSizeThresholdForReset;
 - (id) _doubleTapGestureRecognizer;
 - (id) _scriptingInfoForLink:(id)a ;
 - (id) _scriptingInfoForForm:(id)a ;
 - ({UIEdgeInsets=dddd}) caretInsets;
 - (void) clearInteractionTimer;
 - (void) highlightApproximateNodeInverted:(BOOL)a ;
 - (void) _resetInteractionWithLocation:({CGPoint=dd})a ;
 - (void) attemptClick:(id)a ;
 - (void) _showDataDetectorsSheet;
 - (void) _showLinkSheet;
 - (id) approximateNodeAtViewportLocation:(^{CGPoint=dd})a ;
 - (void) _singleTapRecognized:(id)a ;
 - (void) _doubleTapRecognized:(id)a ;
 - (void) _twoFingerDoubleTapRecognized:(id)a ;
 - (void) _highlightLongPressRecognized:(id)a ;
 - (void) _longPressRecognized:(id)a ;
 - (void) _twoFingerPanRecognized:(id)a ;
 - (void) _showImageSheet;
 - (SEL) _actionForLongPressOnElement:(id)a ;
 - (BOOL) supportsTwoFingerScrollingAtTouchLocation:({CGPoint=dd})a andLocation:({CGPoint=dd})b ;
 - (void) sendScrollWheelEvents;
 - (void) _syntheticMouseEventNotHandledAtLocation:({CGPoint=dd})a ;
 - (void) deferInteraction;
 - (void) performClick:(id)a ;
 - (id) deepestNodeAtViewportLocation:({CGPoint=dd})a ;
 - (void) _sendMouseMoveAndAttemptClick:(id)a ;
 - (void) performInteractionSelector:(SEL)a afterDelay:(double)b ;
 - (void) resetInteraction;
 - (void) hideTapHighlight;
 - (BOOL) gestureRecognizer:(id)a canBePreventedByGestureRecognizer:(id)b ;
 - (void) highlightApproximateNodeAndDisplayInfoSheet;
 - (id) _targetURL;
 - (void) _didDismissElementSheet;
 - (void) setInteractionDelegate:(id)a ;
 - (id) interactionDelegate;
 - (void) setAllowsImageSheet:(BOOL)a ;
 - (void) setAllowsLinkSheet:(BOOL)a ;
 - (id) interactionElement;
 - (id) superviewForSheet;
 - (void) _setAcceptsFirstResponder:(BOOL)a ;
 - (void) action:(id)a didDismissAlertController:(id)b ;
 - (void) _createSheetWithElementActions:(id)a showLinkTitle:(BOOL)b ;
 - (void) actionDidFinish;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) _presentationRectForSheetGivenPoint:({CGPoint=dd})a inHostView:(id)b ;
 - (id) hostViewForSheet:(id)a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) initialPresentationRectInHostViewForSheet:(id)a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) presentationRectInHostViewForSheet:(id)a ;
 - (id) beginPrintModeWithWidth:(double)a height:(double)b startOffset:(double)c shrinkToFit:(BOOL)d tileClippedContent:(BOOL)e ;
 - (id) beginPrintModeForFrame:(id)a withWidth:(double)b height:(double)c startOffset:(double)d shrinkToFit:(BOOL)e tileClippedContent:(BOOL)f ;
 - (id) beginPrintModeForFrame:(id)a withSize:({CGSize=dd})b startOffset:(double)c minimumLayoutWidth:(double)d maximumLayoutWidth:(double)e tileClippedContent:(BOOL)f ;
 - (id) _beginPrintModeForHTMLView:(id)a withSize:({CGSize=dd})b startOffset:(double)c minimumLayoutWidth:(double)d maximumLayoutWidth:(double)e tileClippedContent:(BOOL)f ;
 - (id) _beginPrintModeForPDFView:(id)a withSize:({CGSize=dd})b startOffset:(double)c minimumLayoutWidth:(double)d maximumLayoutWidth:(double)e ;
 - (void) _drawPDFPagesForPage:(unsigned long long)a withPaginationInfo:(id)b ;
 - (BOOL) isInPrintMode;
 - (id) beginPrintModeWithWidth:(double)a height:(double)b startOffset:(double)c shrinkToFit:(BOOL)d ;
 - (id) beginPrintModeWithSize:({CGSize=dd})a startOffset:(double)b minimumLayoutWidth:(double)c maximumLayoutWidth:(double)d tileClippedContent:(BOOL)e ;
 - (void) endPrintMode;
 - (void) drawPage:(unsigned long long)a withPaginationInfo:(id)b ;
 - (BOOL) mouseEventsChangeSelection;
 - (id) selectionRects;
 - (void) setRangedSelectionBaseToCurrentSelection;
 - (void) clearRangedSelectionInitialExtent;
 - (void) setRangedSelectionWithExtentPoint:({CGPoint=dd})a ;
 - (void) setSelectionWithFirstPoint:({CGPoint=dd})a secondPoint:({CGPoint=dd})b ;
 - (BOOL) setRangedSelectionExtentPoint:({CGPoint=dd})a baseIsStart:(BOOL)b ;
 - (void) setRangedSelectionBaseToCurrentSelectionStart;
 - (void) setRangedSelectionInitialExtentToCurrentSelectionEnd;
 - (void) setRangedSelectionBaseToCurrentSelectionEnd;
 - (void) setRangedSelectionInitialExtentToCurrentSelectionStart;
 - ({CGPoint=dd}) convertPointToSelectedFrameCoordinates:({CGPoint=dd})a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) closestCaretRectInMarkedTextRangeForPoint:({CGPoint=dd})a ;
 - (void) toggleBaseWritingDirection;
 - (void) setRangedSelectionExtentPoint:({CGPoint=dd})a baseIsStart:(BOOL)b allowFlipping:(BOOL)c ;
 - (id) wordAtPoint:({CGPoint=dd})a ;
 - (void) smartExtendRangedSelection:(int)a ;
 - (BOOL) selectionIsCaretInDisplayBlockElementAtOffset:(int)a ;
 - (unsigned long long) offsetInMarkedTextForSelection:(id)a ;
 - (void) setCaretInsets:({UIEdgeInsets=dddd})a ;
 - (id) textInDOMRange:(id)a ;
 - (id) asText;
 - (id) positionAtStartOrEndOfWord:(id)a ;
 - (id) delegate;
 - (long long) selectionAffinity;
 - (id) contentView;
 - (id) initWithFrame:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (void) loadData:(id)a MIMEType:(id)b textEncodingName:(id)c baseURL:(id)d ;
 - (id) webView;
 - (void) setFrame:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (void) setBaseWritingDirection:(long long)a ;
 - (id) textInputTraits;
 - (BOOL) isEditable;
 - (void) stopLoading:(id)a ;
 - (id) supportedPasteboardTypesForCurrentSelection;
 - (id) undoManagerForWebView:(id)a ;
 - (void) webView:(id)a didCommitLoadForFrame:(id)b ;
 - (void) webView:(id)a didFinishLoadForFrame:(id)b ;
 - (void) webView:(id)a didFailLoadWithError:(id)b forFrame:(id)c ;
 - (void) webView:(id)a didChangeLocationWithinPageForFrame:(id)b ;
 - (void) webView:(id)a didFirstVisuallyNonEmptyLayoutInFrame:(id)b ;
 - (id) undoManager;
 - (void) writeDataToPasteboard:(id)a ;
 - (id) readDataFromPasteboard:(id)a withIndex:(long long)b ;
 - (BOOL) hasRichlyEditableSelection;
 - (long long) getPasteboardItemsCount;
 - (BOOL) performsTwoStepPaste:(id)a ;
 - (long long) getPasteboardChangeCount;
 - (id) checkSpellingOfString:(id)a ;
 - (void) setDrawsBackground:(BOOL)a ;
 - (id) selectedDOMRange;
 - (void) setMarkedText:(id)a selectedRange:({_NSRange=QQ})b ;
 - (void) loadRequest:(id)a ;
 - (void) webView:(id)a saveStateToHistoryItem:(id)b forFrame:(id)c ;
 - (void) webView:(id)a restoreStateFromHistoryItem:(id)b forFrame:(id)c force:(BOOL)d ;
 - (void) webViewDidRestoreFromPageCache:(id)a ;
 - (BOOL) webView:(id)a shouldScrollToPoint:({CGPoint=dd})b forFrame:(id)c ;
 - (void) webView:(id)a willAddPlugInView:(id)b ;
 - (void) insertText:(id)a ;
 - (void) deleteFromInputWithFlags:(unsigned long long)a ;
 - (void) deleteFromInput;
 - (void) addInputString:(id)a withFlags:(unsigned long long)b ;
 - (void) webView:(id)a didReceiveViewportArguments:(id)b ;
 - (void) webView:(id)a needsScrollNotifications:(id)b forFrame:(id)c ;
 - (void) webView:(id)a didObserveDeferredContentChange:(int)b forFrame:(id)c ;
 - (void) webViewDidPreventDefaultForEvent:(id)a ;
 - (void) webViewDidReceiveMobileDocType:(id)a ;
 - (id) webView:(id)a plugInViewWithArguments:(id)b fromPlugInPackage:(id)c ;
 - (void) webView:(id)a willShowFullScreenForPlugInView:(id)b ;
 - (void) webView:(id)a didHideFullScreenForPlugInView:(id)b ;
 - (void) _webthread_webView:(id)a attachRootLayer:(id)b ;
 - (void) webViewDidCommitCompositingLayerChanges:(id)a ;
 - (void) revealedSelectionByScrollingWebFrame:(id)a ;
 - (void) webViewDidStartOverflowScroll:(id)a ;
 - (void) webViewDidEndOverflowScroll:(id)a ;
 - (void) webView:(id)a runOpenPanelForFileButtonWithResultListener:(id)b allowMultipleFiles:(BOOL)c acceptMIMETypes:(id)d ;
 - ({CGPoint=dd}) interactionLocation;
 - (void) showPlaybackTargetPicker:(BOOL)a fromRect:({CGRect={CGPoint=dd}{CGSize=dd}})b ;
 - (int) deviceOrientation;
 - (BOOL) isUnperturbedDictationResultMarker:(id)a ;
 - (void) webViewDidDrawTiles:(id)a ;
 - (void) webThreadWebViewDidLayout:(id)a byScrolling:(BOOL)b ;
 - (int) selectionState;
 - (BOOL) hasSelection;
 - (long long) selectionBaseWritingDirection;
 - (BOOL) suppressesIncrementalRendering;
 - (BOOL) mediaPlaybackAllowsAirPlay;
 - (void) setCaretChangeListener:(id)a ;
 - (id) text;
 - (id) subviews;
 - (void) setOpaque:(BOOL)a ;
 - (BOOL) becomeFirstResponder;
 - (BOOL) resignFirstResponder;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) exposedScrollViewRect;


@end
