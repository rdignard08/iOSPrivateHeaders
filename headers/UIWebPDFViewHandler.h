
@protocol UIWebPDFViewPrivateDelegate, UIDocumentPasswordViewDelegate, _UIRotatingAlertControllerDelegate, UIWebPDFViewDelegate, _UIWebDoubleTapDelegate, _UIWebRotationDelegate;
@interface UIWebPDFViewHandler : NSObject <UIWebPDFViewPrivateDelegate, UIDocumentPasswordViewDelegate, _UIRotatingAlertControllerDelegate, UIWebPDFViewDelegate, _UIWebDoubleTapDelegate, _UIWebRotationDelegate> {

    UIWebPDFView* _pdfView;
    BOOL _scalesPageToFit;
    double _initialZoomScale;
    NSObject<UIWebPDFViewHandlerDelegate>* _pdfHandlerDelegate;
    _UIHighlightView* _linkHighlightView;
    UIWebPDFLabelView* _pageLabelView;
    BOOL _showPageLabels;
    BOOL _showsShadowsForHTMLContent;
    BOOL _cachedScrollViewShadowsState;
    UIDocumentPasswordView* _passwordEntryView;
    NSMapTable* _searchControllers;
    UIColor* _backgroundColorForUnRenderedContent;
    BOOL _hideActivityIndicatorForUnRenderedContent;
    BOOL _hidePageViewsUntilReadyToRender;
    WebPDFNSNumberFormatter* _labelViewFormatter;
    {_PDFHistoryItem="restorePending"B"isInitialScale"B"zoomScale"d"contentOffset"{CGPoint="x"d"y"d}} _pendingHistoryItemRestore;
    _UIRotatingAlertController* _linkActionSheet;
    NSDictionary* _linkActionInfo;
    NSArray* _linkActions;
    {CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}} _rectOfInterest;
    BOOL _rectOfInterestConsidersHeight;
    UIAlertView* _currentAlert;
}
@property (nonatomic, assign, readonly) UIWebPDFView* pdfView;
@property (nonatomic, assign, readonly) UIView* frontView;
@property (nonatomic, assign, readwrite) NSNumber* scalesPageToFit;
@property (nonatomic, assign, readwrite) NSNumber* showPageLabels;
@property (nonatomic, assign, readwrite) NSNumber* pdfHandlerDelegate;
@property (nonatomic, retain, readwrite) UIColor* backgroundColorForUnRenderedContent;
@property (nonatomic, assign, readwrite) NSNumber* hideActivityIndicatorForUnRenderedContent;
@property (nonatomic, assign, readwrite) NSNumber* hidePageViewsUntilReadyToRender;

 - (void) dealloc;
 - (void) alertView:(id)a didDismissWithButtonIndex:(long long)b ;
 - (void) saveStateToHistoryItem:(id)a forWebView:(id)b ;
 - (void) restoreStateFromHistoryItem:(id)a forWebView:(id)b ;
 - (double) minimumScaleForSize:({CGSize=dd})a ;
 - (id) enclosingScrollView;
 - (double) zoomedDocumentScale;
 - (double) currentDocumentScale;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) visibleContentRect;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) rectOfInterestForPoint:({CGPoint=dd})a ;
 - ({?=ddd}) doubleTapScalesForSize:({CGSize=dd})a ;
 - (BOOL) considerHeightForDoubleTap;
 - (id) hostViewForSheet:(id)a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) initialPresentationRectInHostViewForSheet:(id)a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) presentationRectInHostViewForSheet:(id)a ;
 - (BOOL) scalesPageToFit;
 - (id) pdfView;
 - (void) updateViewSettings;
 - (void) setScalesPageToFit:(BOOL)a ;
 - (void) setShowPageLabels:(BOOL)a ;
 - (void) rotateEnclosingScrollViewToFrame:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (void) updateViewHierarchyForFirstNonEmptyLayoutInFrame:(id)a ;
 - (void) updateViewHierarchyForDocumentViewNewLoad:(id)a ;
 - (void) updateViewHierarchyForDocumentViewLoadComplete:(id)a ;
 - (void) handleScrollToAnchor:(id)a ;
 - (void) didReceiveMemoryWarning:(id)a ;
 - (void) _keyboardDidShow:(id)a ;
 - ({?=ddd}) scalesForContainerSize:({CGSize=dd})a ;
 - (void) updateBoundariesOfScrollView:(id)a withScales:({?=ddd})b ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) rectOfInterestForRotation;
 - (double) minimumVerticalContentOffset;
 - (double) heightToKeepVisible;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) activeRectForRectOfInterest:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (BOOL) considerHeightOfRectOfInterestForRotation;
 - (id) _absoluteUrlRelativeToDocumentURL:(id)a ;
 - (id) frontView;
 - (void) didScroll:(id)a ;
 - (void) setBackgroundColorForUnRenderedContent:(id)a ;
 - (void) ensureCorrectPagesAreInstalled:(BOOL)a ;
 - (id) passwordForPDFView:(id)a ;
 - (void) didDetermineDocumentBounds:(id)a ;
 - (void) pdfView:(id)a zoomToRect:({CGRect={CGPoint=dd}{CGSize=dd}})b forPoint:({CGPoint=dd})c considerHeight:(BOOL)d ;
 - (void) resetZoom:(id)a ;
 - (void) handleLinkClick:(id)a inRect:({CGRect={CGPoint=dd}{CGSize=dd}})b ;
 - (void) handleLongPressOnLink:(id)a atPoint:({CGPoint=dd})b inRect:({CGRect={CGPoint=dd}{CGSize=dd}})c contentRect:({CGRect={CGPoint=dd}{CGSize=dd}})d ;
 - (BOOL) hidePageViewsUntilReadyToRender;
 - (void) setHidePageViewsUntilReadyToRender:(BOOL)a ;
 - (id) backgroundColorForUnRenderedContent;
 - (BOOL) hideActivityIndicatorForUnRenderedContent;
 - (void) setHideActivityIndicatorForUnRenderedContent:(BOOL)a ;
 - (void) clearPageLabel;
 - (void) _setSearchControllerDocumentToSearch:(id)a ;
 - (void) clearAllViews;
 - (void) clearActionSheet;
 - (void) clearLinkHighlight;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) _rectForPdfView:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (id) _scroller:(id)a ;
 - (id) _getPDFDocumentViewForWebView:(id)a ;
 - (void) _replacePDFViewIfPresentWithWebDocView:(id)a ;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) _rectForPasswordView:(id)a ;
 - (void) _removePDFViewIfWebDocViewIsNotPDF:(id)a ;
 - (void) _removePDFViewIfWebDocViewIsNotSamePDF:(id)a ;
 - (void) _createPDFViewIfNeeded:(id)a ;
 - (void) _ensurePDFViewInHierarchyForWebDocView:(id)a ;
 - (unsigned long long) _verticalEdgeForContentOffsetInScrollView:(id)a ;
 - (double) _pinValueForVerticalEdge:(unsigned long long)a inScrollView:(id)b ;
 - (void) _adjustZoomScalesForScrollViewInternal:(id)a ;
 - (id) createLinkHighlight;
 - (void) _notifyDelegateWillClickLink:(id)a ;
 - (void) _notifyDelegateDidClickLink:(id)a ;
 - (void) _completeLinkClickWithURL:(id)a ;
 - (void) _completeLinkClickWithURLString:(id)a ;
 - (void) highlightRect:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (id) _actionForType:(int)a ;
 - (id) _actionsForInteractionInfo:(id)a ;
 - (void) performAction:(id)a fromAlertController:(id)b ;
 - (void) _showLinkSheet:(id)a ;
 - (void) _showPasswordErrorAlert;
 - (void) _adjustContentOffsetForKeyboardIfNeeded;
 - (void) adjustZoomScalesForScrollView;
 - (void) restoreStateFromPendingHistoryItem;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) _frameForDocumentBounds:({CGRect={CGPoint=dd}{CGSize=dd}})a ;
 - (void) _postdidDetermineDocumentBounds;
 - (void) _showPasswordEntryViewForFile:(id)a ;
 - (void) updatePageNumberLabelWithUserScrolling:(BOOL)a animated:(BOOL)b ;
 - (void) _updateViewHierarchyForDocumentView:(id)a ignoreIfSame:(BOOL)b ;
 - (void) updateViewHierarchyForDocumentViewTabSwitch:(id)a restoringZoomScale:(double)b andScrollPt:({CGPoint=dd})c ;
 - (id) _getLabelViewFormatter;
 - (id) createPageLabel;
 - (void) scrollToPageNumber:(long long)a animate:(BOOL)b ;
 - (void) _resultRects:(id)a andResultViews:(id)b forSearchResult:(id)c inViewCoordinates:(id)d ;
 - (void) userDidEnterPassword:(id)a forPasswordView:(id)b ;
 - (void) didBeginEditingPassword:(id)a inView:(id)b ;
 - (void) didEndEditingPassword:(id)a inView:(id)b ;
 - (id) searchControllerForHighlighter:(id)a ;
 - (void) clearSearchControllerForHighlighter:(id)a ;
 - (id) findOnPageHighlighter;
 - (void) removeViewFromSuperview;
 - (void) updateViewHierarchyForDocumentViewTabSwitch:(id)a ;
 - (void) revealSearchResult:(id)a andZoomIn:(BOOL)b ;
 - (BOOL) showPageLabels;
 - (id) pdfHandlerDelegate;
 - (void) setPdfHandlerDelegate:(id)a ;
 - (id) init;
 - (id) contentView;


@end
