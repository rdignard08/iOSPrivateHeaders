
@interface WAKWindow : WAKResponder {

    @"CALayer" _hostLayer;
    ^{LegacyTileCache=@{RetainPtr<CGImage *>=^v}BBB{RetainPtr<LegacyTileCacheTombstone>=^v}ii{IntSize=ii}BBBBBB{OwnPtr<WebCore::LegacyTileGrid>=^{LegacyTileGrid}}{OwnPtr<WebCore::LegacyTileGrid>=^{LegacyTileGrid}}{Timer<WebCore::LegacyTileCache>=^^?dddiI^{Vector<WebCore::TimerBase *, 0, WTF::CrashOnOverflow>}{function<void ()>={type=[24C]}^{__base<void ()>}}}{Vector<WebCore::IntRect, 0, WTF::CrashOnOverflow>=^{IntRect}II}fff{Mutex={_opaque_pthread_mutex_t=q[56c]}}{Mutex={_opaque_pthread_mutex_t=q[56c]}}{Mutex={_opaque_pthread_mutex_t=q[56c]}}B} _tileCache;
    {CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}} _frozenVisibleRect;
    @"CALayer" _rootLayer;
    {CGSize="width"d"height"d} _screenSize;
    {CGSize="width"d"height"d} _availableScreenSize;
    d _screenScale;
    {CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}} _frame;
    @"WAKView" _contentView;
    @"WAKView" _responderView;
    @"WAKView" _nextResponder;
    BOOL _visible;
    BOOL _useOrientationDependentFontAntialiasing;
    BOOL _entireWindowVisibleForTesting;
    {TCMalloc_SpinLock="lockword_"I} _exposedScrollViewRectLock;
    {CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}} _exposedScrollViewRect;
}
 + (void) setOrientationProvider:(id)a;
 + (id) currentEvent;
 + (BOOL) hasLandscapeOrientation;

 - (Vv) release;
 - (Vv) _webcore_releaseOnWebThread;
 - (id) description;
 - (id) .cxx_construct;
 - (void) dealloc;
 - (void) close;
 - (void) makeKeyWindow;
 - (id) recursiveDescription;
 - (void) layoutTilesNow;
 - (void) willRotate;
 - (void) didRotate;
 - (void) setContentRect:({CGRect={CGPoint=dd}{CGSize=dd}})a;
 - (void) setCurrentTileScale:(f)a;
 - (void) setZoomedOutTileScale:(f)a;
 - (void) removeAllNonVisibleTiles;
 - (void) setTilesOpaque:(BOOL)a;
 - (void) removeAllTiles;
 - (void) setUseOrientationDependentFontAntialiasing:(BOOL)a;
 - (void) setTilingDirection:(i)a;
 - (void) setExposedScrollViewRect:({CGRect={CGPoint=dd}{CGSize=dd}})a;
 - (void) removeForegroundTiles;
 - (void) sendMouseMoveEvent:(id)acontentChange:(^i)b;
 - (void) setRootLayer:(id)a;
 - (void) setScreenSize:({CGSize=dd})a;
 - (void) setAvailableScreenSize:({CGSize=dd})a;
 - (void) setScreenScale:(d)a;
 - (void) layoutTilesNowForRect:({CGRect={CGPoint=dd}{CGSize=dd}})a;
 - (void) setContentReplacementImage:(^{CGImage=})a;
 - (void) layoutTiles;
 - (void) setTilingMode:(i)a;
 - (BOOL) tilesOpaque;
 - (void) setKeepsZoomedOutTiles:(BOOL)a;
 - (BOOL) keepsZoomedOutTiles;
 - (void) dumpTiles;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) visibleRect;
 - (id) contentView;
 - (void) setContentView:(id)a;
 - (id) initWithFrame:({CGRect={CGPoint=dd}{CGSize=dd}})a;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) frame;
 - (void) setVisible:(BOOL)a;
 - (id) initWithLayer:(id)a;
 - (void) setNeedsDisplay;
 - (void) setNeedsDisplayInRect:({CGRect={CGPoint=dd}{CGSize=dd}})a;
 - (id) rootLayer;
 - (id) firstResponder;
 - (i) keyViewSelectionDirection;
 - (id) _newFirstResponderAfterResigning;
 - (void) setAcceleratedDrawingEnabled:(BOOL)a;
 - (void) setTileBordersVisible:(BOOL)a;
 - (void) setTilePaintCountsVisible:(BOOL)a;
 - (BOOL) isVisible;
 - ({CGSize=dd}) screenSize;
 - ({CGSize=dd}) availableScreenSize;
 - (^{LegacyTileCache=@{RetainPtr<CGImage *>=^v}BBB{RetainPtr<LegacyTileCacheTombstone>=^v}ii{IntSize=ii}BBBBBB{OwnPtr<WebCore::LegacyTileGrid>=^{LegacyTileGrid}}{OwnPtr<WebCore::LegacyTileGrid>=^{LegacyTileGrid}}{Timer<WebCore::LegacyTileCache>=^^?dddiI^{Vector<WebCore::TimerBase *, 0, WTF::CrashOnOverflow>}{function<void ()>={type=[24C]}^{__base<void ()>}}}{Vector<WebCore::IntRect, 0, WTF::CrashOnOverflow>=^{IntRect}II}fff{Mutex={_opaque_pthread_mutex_t=q[56c]}}{Mutex={_opaque_pthread_mutex_t=q[56c]}}{Mutex={_opaque_pthread_mutex_t=q[56c]}}B}) tileCache;
 - ({CGPoint=dd}) convertBaseToScreen:({CGPoint=dd})a;
 - ({CGPoint=dd}) convertScreenToBase:({CGPoint=dd})a;
 - (d) screenScale;
 - (id) hostLayer;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) extendedVisibleRect;
 - (BOOL) useOrientationDependentFontAntialiasing;
 - (void) displayRect:({CGRect={CGPoint=dd}{CGSize=dd}})a;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) exposedScrollViewRect;
 - (BOOL) isKeyWindow;
 - (void) sendEventSynchronously:(id)a;
 - (BOOL) makeFirstResponder:(id)a;
 - (void) sendEvent:(id)a;
 - ({CGRect={CGPoint=dd}{CGSize=dd}}) _visibleRectRespectingMasksToBounds:(BOOL)a;
 - (void) freezeVisibleRect;
 - (void) unfreezeVisibleRect;
 - (void) setFrame:({CGRect={CGPoint=dd}{CGSize=dd}})adisplay:(BOOL)b;
 - (void) setEntireWindowVisibleForTesting:(BOOL)a;
 - (i) tilingMode;
 - (i) tilingDirection;
 - (f) zoomedOutTileScale;
 - (f) currentTileScale;
 - (BOOL) hasPendingDraw;
 - (^{CGImage=}) contentReplacementImage;
 - (void) setTileControllerShouldUseLowScaleTiles:(BOOL)a;


@end
